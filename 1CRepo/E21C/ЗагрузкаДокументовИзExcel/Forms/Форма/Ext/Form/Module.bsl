//Внешняя обработка разрабатывалась для 1С:Предприятие 8.3 (8.3.18.1483)
//Конфиг --> 1С:Комплексная автоматизация 2 (2.5.11.96)

&НаКлиенте
Процедура ПутьExcelПриИзменении(Элемент)
	Если ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(Элемент.ТекстРедактирования);
	Если Не Файл.Существует() Тогда
		Отказ = Истина;
		Возврат; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьExcelНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр						=	"Документ Excel (*.xls, *.xlsx)|*.xls;*.xlsx|";
	ДиалогВыбораФайла.Расширение					=	"xlsx";
	ДиалогВыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогВыбораФайла.ИндексФильтра					=	0;
	ДиалогВыбораФайла.ПолноеИмяФайла				=	Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ЭтаФорма.ПутьExcel = ДиалогВыбораФайла.ПолноеИмяФайла;
		ПутьExcelПриИзменении(Элемент);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзExcel(Команда)
	ТипДокумента = ЭтаФорма.Элементы.ТипДокумента.ТекстРедактирования;
	ТипДокументаПравильный = ПроверитьТипДокумента(ТипДокумента);
	Если ТипДокументаПравильный Тогда
		Перейти ~Продолжить;
	Иначе
		Сообщить("Поле тип документа не заполнено или содержит некорректные данные.");
		Возврат;
	КонецЕсли;
	~Продолжить:
	ПутьExcel = ЭтаФорма.Элементы.ПутьExcel.ТекстРедактирования;
	ФайлExcel = Новый Файл(ПутьExcel);
	Если НЕ ФайлExcel.Существует() Тогда
		Сообщить("Excel-файл не найден.");
		Возврат;
	КонецЕсли;
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьExcel);
	ДанныеExcel = Новый Структура;
	ДанныеExcel.Вставить("Расширение", ФайлExcel.Расширение);
	ДанныеExcel.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	ДанныеExcel.Вставить("ТипДокумента", ТипДокумента);
	ПрочитатьExcel(ДанныеExcel);
КонецПроцедуры 

&НаКлиенте
Процедура ОчиститьТаблицы(Команда)
	Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицыПодтверждение",
	ЭтотОбъект);	
	
	ПоказатьВопрос(Оповещение,
	"Вы действительно хотите очистить таблицы?",
	РежимДиалогаВопрос.ДаНетОтмена,
	0,
	КодВозвратаДиалога.Да,
	"Подтверждение"
	);    	
КонецПроцедуры

&НаКлиенте 
Процедура ОчиститьТаблицыПодтверждение(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.СодержимоеExcelФайла.Очистить();
		Объект.СодержимоеExcelФайлаДоп.Очистить();
	КонецЕсли; 	
КонецПроцедуры


&НаСервере
Функция ПроверитьТипДокумента(ТипДокумента)
	Если ТипДокумента = "" Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию(ТипДокумента) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;	
	КонецЕсли; 
КонецФункции // ()

&НаСервере
Функция ПрочитатьExcel(ДанныеExcel, Команда = Неопределено)
	ФайлExcelВременный = ПолучитьИмяВременногоФайла(ДанныеExcel.Расширение);
	ДанныеExcel.ДвоичныеДанные.Записать(ФайлExcelВременный);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ФайлExcelВременный);
	УдалитьФайлы(ФайлExcelВременный);
	ОбластьТаблицы = ТабличныйДокумент.Область(4, 2, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьТаблицы);
	ПостроительЗапроса.Выполнить();
	ТЗ = ПостроительЗапроса.Результат.Выгрузить();
	Если Команда = "ПоказатьExcel" Тогда
		ДокументРезультат = ТаблицаЗначенийВТабличныйДокумент(ТЗ);
		Возврат ДокументРезультат;
	ИначеЕсли Команда = "СоздатьНеНайденнуюНоменклатуру" Тогда
		Возврат ТЗ;
	Иначе
		ОбработатьТЗ(ТЗ, ДанныеExcel.ТипДокумента);
		Возврат Неопределено;
	КонецЕсли; 
КонецФункции // ()

&НаСервере
Процедура ОбработатьТЗ(ТЗ, ТипДокумента)
	Объект.СодержимоеExcelФайла.Очистить();
	Объект.СодержимоеExcelФайлаДоп.Очистить();
	Если ТипДокумента = "Приобретение товаров и услуг (Документ)" ИЛИ ТипДокумента = "Реализация товаров и услуг (Документ)" Тогда
		Для каждого СтрокаТЗ Из ТЗ Цикл
			Если СтрокаТЗ.Дата <> "" И СтрокаТЗ.ВидОперации <> "" Тогда
				СтрокаТЧ = Объект.СодержимоеExcelФайла.Добавить();
				СтрокаТЧ.Дата = Дата(СтрокаТЗ.Дата);
				СтрокаТЧ.ВидОперации = СтрокаТЗ.ВидОперации;
				СтрокаТЧ.СуммаДокумента = Число(СтрокаТЗ.Сумма);
				СтрокаТЧ.Контрагент = ?(Справочники.Контрагенты.НайтиПоНаименованию(СтрокаТЗ.Контрагент).Наименование = СтрокаТЗ.Контрагент, Справочники.Контрагенты.НайтиПоНаименованию(СтрокаТЗ.Контрагент), "");
				СтрокаТЧ.Организация = ?(Справочники.Организации.НайтиПоНаименованию(СтрокаТЗ.Организация).Наименование = СтрокаТЗ.Организация, Справочники.Организации.НайтиПоНаименованию(СтрокаТЗ.Организация), "");
				СтрокаТЧ.Склад = ?(Справочники.Склады.НайтиПоНаименованию(СтрокаТЗ.Склад).Наименование = СтрокаТЗ.Склад, Справочники.Склады.НайтиПоНаименованию(СтрокаТЗ.Склад), "");
				СтрокаТЧ.Комментарий = СтрокаТЗ.Комментарий;
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЗ);
			ИначеЕсли СтрокаТЗ.ТоварНоменклатура <> "" И СтрокаТЗ.ТоварЦена <> "" Тогда
				СтрокаТЧ = Объект.СодержимоеExcelФайла.Добавить();
				СтрокаТЧ.ТоварНоменклатура = ?(Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТЗ.ТоварНоменклатура).Наименование = СтрокаТЗ.ТоварНоменклатура, Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТЗ.ТоварНоменклатура), "");
				СтрокаТЧ.ТоварКоличество = Число(?(СтрокаТЗ.ТоварКоличество <> "", СтрокаТЗ.ТоварКоличество, 1));
				СтрокаТЧ.ТоварЦена = Число(СтрокаТЗ.ТоварЦена);
				СтрокаТЧ.ТоварСумма = Число(СтрокаТЗ.ТоварСумма);
				СтрокаТЧ.ТоварНДС = ПолучитьСтавкуНДС(СтрокаТЗ.ТоварНДС);
				СтрокаТЧ.ТоварСуммаНДС = Число(?(СтрокаТЗ.ТоварСуммаНДС <> "", СтрокаТЗ.ТоварСуммаНДС, 0));
				СтрокаТЧ.ТоварУслуга = СтрокаТЗ.ТоварУслуга;
			КонецЕсли; 
		КонецЦикла;
	ИначеЕсли ТипДокумента = "Поступление безналичных денежных средств (Документ)" ИЛИ ТипДокумента = "Списание безналичных денежных средств (Документ)" Тогда
		Для каждого СтрокаТЗ Из ТЗ Цикл
			Попытка
				Если СтрокаТЗ.Дата = "" ИЛИ СтрокаТЗ.СуммаДокумента = "" Тогда
					Продолжить;	
				КонецЕсли;
			Исключение
				Если СтрокаТЗ.ДатаОплаты = "" ИЛИ СтрокаТЗ.Сумма = "" Тогда
					Продолжить;
				КонецЕсли; 
			КонецПопытки; 
			СтрокаТЧ = Объект.СодержимоеExcelФайлаДоп.Добавить();
			Попытка
				СтрокаТЧ.Дата = Дата(СтрокаТЗ.Дата);	
			Исключение
				СтрокаТЧ.Дата = Дата(СтрокаТЗ.ДатаОплаты);
			КонецПопытки;	
			СтрокаТЧ.ВидОперации = СтрокаТЗ.ВидОперации;
			Попытка
				СтрокаТЧ.СуммаДокумента = Число(СтрокаТЗ.Сумма);	
			Исключение
				СтрокаТЧ.СуммаДокумента = Число(СтрокаТЗ.СуммаДокумента);
			КонецПопытки;
			СтрокаТЧ.Контрагент = ?(Справочники.Контрагенты.НайтиПоНаименованию(СтрокаТЗ.Контрагент).Наименование = СтрокаТЗ.Контрагент, Справочники.Контрагенты.НайтиПоНаименованию(СтрокаТЗ.Контрагент), "");
			СтрокаТЧ.Организация = ?(Справочники.Организации.НайтиПоНаименованию(СтрокаТЗ.Организация).Наименование = СтрокаТЗ.Организация, Справочники.Организации.НайтиПоНаименованию(СтрокаТЗ.Организация), "");
			СтрокаТЧ.Комментарий = СтрокаТЗ.Комментарий;
			СтрокаТЧ.СтавкаНДС = ПолучитьСтавкуНДС(СтрокаТЗ.НДС);
			СтрокаТЧ.СуммаНДС = Число(СтрокаТЗ.СуммаНДС);
			СтрокаТЧ.СчетОрганизации = ?(Справочники.БанковскиеСчетаОрганизаций.НайтиПоНаименованию(СтрокаТЗ.СчетОрганизации).Наименование = СтрокаТЗ.СчетОрганизации, Справочники.БанковскиеСчетаОрганизаций.НайтиПоНаименованию(СтрокаТЗ.СчетОрганизации), "");
			СтрокаТЧ.НомерСчетаОрганизации = СтрокаТЗ.НомерСчетаБанкаОрганизации;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетОрганизации) Тогда
				СчетОрганизации = НайтиСчетБанкаПоНомеру(СтрокаТЧ.НомерСчетаОрганизации, "Организация");
				СтрокаТЧ.СчетОрганизации = ?(СчетОрганизации <> Неопределено, СчетОрганизации, "");
			КонецЕсли; 
			СтрокаТЧ.СчетКонтрагента = ?(Справочники.БанковскиеСчетаКонтрагентов.НайтиПоНаименованию(СтрокаТЗ.СчетКонтрагента).Наименование = СтрокаТЗ.СчетКонтрагента, Справочники.БанковскиеСчетаКонтрагентов.НайтиПоНаименованию(СтрокаТЗ.СчетКонтрагента), "");
			СтрокаТЧ.НомерСчетаКонтрагента = СтрокаТЗ.НомерСчетаБанкаКонтрагента;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетКонтрагента) Тогда
				СчетКонтрагента = НайтиСчетБанкаПоНомеру(СтрокаТЧ.НомерСчетаКонтрагента, "Контрагент");
				СтрокаТЧ.СчетКонтрагента = ?(СчетКонтрагента <> Неопределено, СчетКонтрагента, "");
			КонецЕсли; 
			СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЗ);
			СтрокаТЧ.НазначениеПлатежа = СтрокаТЗ.НазначениеПлатежа;
		КонецЦикла; 
	КонецЕсли; 
	ЗаполнитьКоличествоСтрокТЧ(ТипДокумента);
КонецПроцедуры 

&НаСервере
Функция ПолучитьСтавкуНдс(Строка)
	Если Строка = "0%" Тогда
		Возврат Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли Строка = "10/110" Тогда
		Возврат Перечисления.СтавкиНДС.НДС10_110;
	ИначеЕсли Строка = "10%" Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли Строка = "18/118" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18_118;
	ИначеЕсли Строка = "18%" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Строка = "20/120" Тогда
		Возврат Перечисления.СтавкиНДС.НДС20_120;
	ИначеЕсли Строка = "20%" Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;
	Иначе
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли; 	
КонецФункции // ()

&НаСервере
Функция НайтиДоговор(Строка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НазваниеДоговора", Строка.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ОрганизацияНаименование", Строка.Организация);
	Запрос.УстановитьПараметр("КонтрагентНаименование", Строка.Контрагент);
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ДоговорыКонтрагентов.Контрагент.Наименование = &КонтрагентНаименование
	|	И ДоговорыКонтрагентов.Организация.Наименование = &ОрганизацияНаименование
	|	И ДоговорыКонтрагентов.Наименование = &НазваниеДоговора";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 1 ИЛИ Результат.Количество() = 0 Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ДоговорыКредитовИДепозитов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
		|ГДЕ
		|	НЕ ДоговорыКредитовИДепозитов.ПометкаУдаления
		|	И ДоговорыКредитовИДепозитов.Контрагент.Наименование = &КонтрагентНаименование
		|	И ДоговорыКредитовИДепозитов.Организация.Наименование = &ОрганизацияНаименование
		|	И ДоговорыКредитовИДепозитов.Наименование = &НазваниеДоговора";
		Результат2 = Запрос.Выполнить().Выгрузить();
		Если Результат2.Количество() > 1 ИЛИ Результат.Количество() = 0 Тогда
			Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе
			Возврат Результат[0].Ссылка;
		КонецЕсли; 
	Иначе	
		Возврат Результат[0].Ссылка;
	КонецЕсли; 
КонецФункции // ()

&НаСервере
Функция НайтиСчетБанкаПоНомеру(Номер, ТипСчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерСчета", Номер);
	
	СтрокаЗапроса = "ВЫБРАТЬ
	|	Catalog.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Catalog КАК Catalog
	|ГДЕ
	|	ВЫРАЗИТЬ(Catalog.НомерСчета КАК Строка(100)) = &НомерСчета";
	
	Если ТипСчета = "Организация" Тогда
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Catalog", "БанковскиеСчетаОрганизаций");
	ИначеЕсли ТипСчета = "Контрагент" Тогда	
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Catalog", "БанковскиеСчетаКонтрагентов");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() <> 1 Тогда	
		Возврат Неопределено;
	Иначе
		Возврат Результат[0].Ссылка;
	КонецЕсли; 
	
КонецФункции // ()


&НаСервере
Процедура ЗаполнитьКоличествоСтрокТЧ(ТипДокумента)
	Если ТипДокумента = "Приобретение товаров и услуг (Документ)" ИЛИ ТипДокумента = "Реализация товаров и услуг (Документ)" Тогда	
		Объект.КоличествоСтрокТЗ = Объект.СодержимоеExcelФайла.Количество();
	ИначеЕсли ТипДокумента = "Поступление безналичных денежных средств (Документ)" ИЛИ ТипДокумента = "Списание безналичных денежных средств (Документ)" Тогда
		Объект.КоличествоСтрокТЗ = Объект.СодержимоеExcelФайлаДоп.Количество();	
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыНаОсновеТЧНаСервере()
	
	//проверить заполненность поля ТипДокумента
	Если НЕ ЗначениеЗаполнено(Объект.ТипДокумента) Тогда
		Сообщить("Поле Тип документа не заполнено.");
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипДокумента = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию("Приобретение товаров и услуг (Документ)") Тогда
		СоздатьДокументыПоАлгоритму("ПриобретениеТоваровИУслуг");
	ИначеЕсли Объект.ТипДокумента = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию("Реализация товаров и услуг (Документ)") Тогда
		СоздатьДокументыПоАлгоритму("РеализацияТоваровИУслуг");
	ИначеЕсли Объект.ТипДокумента = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию("Поступление безналичных денежных средств (Документ)") Тогда
		СоздатьДокументыПоАлгоритму("ПоступлениеБезналичныхДС");
	ИначеЕсли Объект.ТипДокумента = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию("Списание безналичных денежных средств (Документ)") Тогда	
		СоздатьДокументыПоАлгоритму("СписаниеБезналичныхДС");
	Иначе
		Сообщить("Данный тип документов пока что не поддерживается.");
		Возврат;
	КонецЕсли; 		
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыНаОсновеТЧ(Команда)
	//проверить заполненность табличной части (ДОЛЖНО РАБОТАТЬ)
	Для каждого СтрокаТЧ Из Объект.СодержимоеExcelФайла Цикл
		
		Если (НЕ ЗначениеЗаполнено(СтрокаТЧ.Дата) 
			И (НЕ ЗначениеЗаполнено(СтрокаТЧ.ТоварНоменклатура) 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ТоварКоличество) 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ТоварЦена) 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ТоварСумма)))
			ИЛИ (ЗначениеЗаполнено(СтрокаТЧ.Дата) 
			И (НЕ ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Контрагент)
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ТоварУслуга)))) Тогда
			Сообщить("Некоторые необходимые ячейки табличной части не заполнены!");
			Возврат;
		КонецЕсли; 	
		
	КонецЦикла;
	
	Попытка	
		СоздатьДокументыНаОсновеТЧНаСервере();
	Исключение
		Инфо = ИнформацияОбОшибке();
		ИнфоОписание = Инфо.Описание;
		ИнфоИмяМодуля = Инфо.ИмяМодуля;
		ИнфоНомерСтроки = Инфо.НомерСтроки;
		ИнфоИсходнаяСтрока = Инфо.ИсходнаяСтрока;
		ТекстСообщенияОшибки = ИнфоОписание + Символы.ПС + ИнфоИмяМодуля + Символы.ПС + 
		ИнфоНомерСтроки + Символы.ПС + ИнфоИсходнаяСтрока;
		ПоказатьПредупреждение(,НСтр("ru = 'Операция не может быть выполнена по причине:'") + Символы.ПС + ТекстСообщенияОшибки);
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьExcelФайл(Команда)
	ПутьExcel = ЭтаФорма.Элементы.ПутьExcel.ТекстРедактирования;
	ФайлExcel = Новый Файл(ПутьExcel);
	Если НЕ ФайлExcel.Существует() Тогда
		Сообщить("Excel-файл не найден.");
		Возврат;
	КонецЕсли; 
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьExcel);
	ДанныеExcel = Новый Структура;
	ДанныеExcel.Вставить("Расширение", ФайлExcel.Расширение);
	ДанныеExcel.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	ТаблицаExcel = ПрочитатьExcel(ДанныеExcel, "ПоказатьExcel");
	ТаблицаExcel.Показать();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаЗначенийВТабличныйДокумент(ТаблицаДанных)
	
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаДанных);
	ДокументРезультат = Новый ТабличныйДокумент;
	Построительотчета.Вывести(ДокументРезультат);
	Возврат ДокументРезультат;
	
КонецФункции

&НаСервере
Процедура СоздатьДокументыПоАлгоритму(ТипДокумента)	
	Если ТипДокумента = "ПриобретениеТоваровИУслуг" Тогда
		
		МассивДокИнфо = РазделитьИнформациюТЧПоДокументам();
		Для каждого Элемент Из МассивДокИнфо Цикл
			Если ДокументУжеСуществует(Элемент, ТипДокумента) Тогда
				Сообщить("Документ | " + Элемент[0].Дата + " | " + Элемент[0].Контрагент + " | "  + Элемент[0].Организация + " | " + Элемент[0].СуммаДокумента + " | уже существует!");		
			Иначе
				НовыйДокумент = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
				НовыйДокумент.Дата = Элемент[0].Дата;
				НовыйДокумент.Контрагент = Элемент[0].Контрагент;
				НовыйДокумент.Партнер = Справочники.Партнеры.НайтиПоНаименованию(Строка(Элемент[0].Партнер));
				НовыйДокумент.Организация = Элемент[0].Организация;
				НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика; 
				НовыйДокумент.Договор = Элемент[0].Договор;
				НовыйДокумент.Комментарий = Элемент[0].Комментарий;
				НовыйДокумент.Валюта = Справочники.Валюты.НайтиПоНаименованию("RUB");
				НовыйДокумент.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоНаименованию("RUB");
				НовыйДокумент.ЦенаВключаетНДС = Истина;
				Если ОблагаетсяНДС(Элемент[1]) Тогда
					НовыйДокумент.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
				Иначе		
					НовыйДокумент.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
				КонецЕсли; 
				НовыйДокумент.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
				НовыйДокумент.Менеджер = ПользователиКлиентСервер.ТекущийПользователь();
				НовыйДокумент.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
				НовыйДокумент.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
				НовыйДокумент.Автор = ПользователиКлиентСервер.ТекущийПользователь();
				НовыйДокумент.БанковскийСчетОрганизации = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Элемент[0].Организация,
				Справочники.Валюты.НайтиПоНаименованию("RUB"));	
				НовыйДокумент.Склад = Элемент[0].Склад;
				//НовыйДокумент.ЗакупкаПодДеятельность =
				
				//Данные реквизиты не найдены в версии 1С, для которой разрабатывалась обработка. 
				
				//НовыйДокумент.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
				//НовыйДокумент.Курс = 1;
				//НовыйДокумент.Кратность = 1;
				
				Для каждого Товар Из Элемент[1] Цикл
					
					СтрокаТЧТовары = НовыйДокумент.Товары.Добавить();
					СтрокаТЧТовары.Номенклатура = Товар.Номенклатура;
					СтрокаТЧТовары.Количество = Товар.Количество;
					СтрокаТЧТовары.КоличествоУпаковок = Товар.Количество;
					СтрокаТЧТовары.Цена = Товар.Цена;
					СтрокаТЧТовары.Сумма = Товар.Сумма;
					СтрокаТЧТовары.СтавкаНДС = Товар.НДС;
					СтрокаТЧТовары.СуммаНДС = Товар.СуммаНДС;
					СтрокаТЧТовары.СуммаСНДС = Товар.Сумма;
					СтрокаТЧТовары.СписатьНаРасходы = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоНаименованию(ПолучитьСтатьюРасходов(Элемент[0].Договор));			
					СтрокаТЧТовары.Склад = НовыйДокумент.Склад;	
					
				КонецЦикла;
				
				НовыйДокумент.СуммаДокумента = Элемент[0].СуммаДокумента;
				НовыйДокумент.СуммаВзаиморасчетов = Элемент[0].СуммаДокумента;
				НовыйДокумент.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
				НовыйДокумент.СуммаВзаиморасчетовПоЗаказу = Элемент[0].СуммаДокумента;
				НовыйДокумент.СуммаВзаиморасчетовПоТаре = 0;
				
				//Данные реквизиты не найдены в версии 1С, для которой разрабатывалась обработка. 
				//НовыйДокумент.ЗаполнитьЭтапыГрафикаОплаты();
				Попытка
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Сообщить("Документ | " + НовыйДокумент.Дата + " | " + НовыйДокумент.Контрагент + " | " + НовыйДокумент.Организация + " | " + НовыйДокумент.СуммаДокумента + " | был успешно создан!");	
				Исключение
					НовыйДокумент.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
					Сообщить("Не удалось провести документ | " + НовыйДокумент.Дата + " | " + НовыйДокумент.Контрагент + " | " + НовыйДокумент.Организация + " | " + НовыйДокумент.СуммаДокумента + ", однако он был записан..");
				КонецПопытки; 				
			КонецЕсли; 			
			
		КонецЦикла; 		
		
	ИначеЕсли ТипДокумента = "РеализацияТоваровИУслуг" Тогда
		
		МассивДокИнфо = РазделитьИнформациюТЧПоДокументам();
		Для каждого Элемент Из МассивДокИнфо Цикл
			Если ДокументУжеСуществует(Элемент, ТипДокумента) Тогда
				Сообщить("Документ | " + Элемент[0].Дата + " | " + Элемент[0].Контрагент + " | "  + Элемент[0].Организация + " | " + Элемент[0].СуммаДокумента + " | уже существует!");	
			Иначе
				НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				НовыйДокумент.Дата = Элемент[0].Дата;
				НовыйДокумент.Контрагент = Элемент[0].Контрагент;
				НовыйДокумент.Партнер = Справочники.Партнеры.НайтиПоНаименованию(Строка(Элемент[0].Партнер));
				НовыйДокумент.Организация = Элемент[0].Организация;
				НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту; //возможно не правильно
				НовыйДокумент.Договор = Элемент[0].Договор;
				НовыйДокумент.Основание = Элемент[0].Договор;
				НовыйДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
				НовыйДокумент.ВремяДоставкиС = Дата(1,1,1);
				НовыйДокумент.ВремяДоставкиПо = Дата(1,1,1);
				НовыйДокумент.ВернутьМногооборотнуюТару = Ложь;
				НовыйДокумент.Курсчислитель = 1; //курс заменен на курсчислитель
				НовыйДокумент.Курсзнаменатель = 1; //кратность заменена на курсзнаменатель
				НовыйДокумент.Согласован = Истина;
				НовыйДокумент.СкидкиРассчитаны = Ложь;
				НовыйДокумент.РеализацияПоЗаказам = Ложь;
				НовыйДокумент.УдалитьДатаРаспоряжения = Дата(1,1,1);
				НовыйДокумент.ДоверенностьДата = Дата(1,1,1);
				НовыйДокумент.Комментарий = Элемент[0].Комментарий;
				НовыйДокумент.Валюта = Справочники.Валюты.НайтиПоНаименованию("RUB");
				НовыйДокумент.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоНаименованию("RUB");
				НовыйДокумент.ЦенаВключаетНДС = Истина;
				НовыйДокумент.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
				НовыйДокумент.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
				НовыйДокумент.Менеджер = ПользователиКлиентСервер.ТекущийПользователь();
				НовыйДокумент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
				НовыйДокумент.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
				НовыйДокумент.Автор = ПользователиКлиентСервер.ТекущийПользователь();
				НовыйДокумент.БанковскийСчетОрганизации = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Элемент[0].Организация,
				Справочники.Валюты.НайтиПоНаименованию("RUB"));
				НовыйДокумент.Склад = Элемент[0].Склад;
				НовыйДокумент.ДатаВозвратаМногооборотнойТары = КонецГода(Элемент[0].Дата);
				НовыйДокумент.ВидыЗапасовУказаныВручную = Ложь;
				НовыйДокумент.ТребуетсяЗалогЗаТару = Ложь;
				НовыйДокумент.ОснованиеДата = Дата("20190101");
				НовыйДокумент.ДатаПереходаПраваСобственности = Дата(1,1,1);
				НовыйДокумент.ОсобыеУсловияПеревозки = Ложь;
				НовыйДокумент.ЕстьМаркируемаяПродукцияГИСМ = Ложь;
				НовыйДокумент.УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС = Ложь;
				НовыйДокумент.ОплатаВВалюте = Ложь;	
				
				Для каждого Товар Из Элемент[1] Цикл
					
					СтрокаТЧТовары = НовыйДокумент.Товары.Добавить();
					СтрокаТЧТовары.Номенклатура = Товар.Номенклатура;
					СтрокаТЧТовары.Количество = Товар.Количество;
					СтрокаТЧТовары.КоличествоУпаковок = Товар.Количество;
					СтрокаТЧТовары.Цена = Товар.Цена;
					СтрокаТЧТовары.Сумма = Товар.Сумма;
					СтрокаТЧТовары.СтавкаНДС = Товар.НДС;
					СтрокаТЧТовары.СуммаНДС = Товар.СуммаНДС;
					СтрокаТЧТовары.СуммаСНДС = Товар.Сумма;
					СтрокаТЧТовары.Склад = НовыйДокумент.Склад;
					
				КонецЦикла;
				
				НовыйДокумент.СуммаДокумента = Элемент[0].СуммаДокумента;
				НовыйДокумент.СуммаВзаиморасчетов = Элемент[0].СуммаДокумента;
				НовыйДокумент.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
				НовыйДокумент.СуммаВзаиморасчетовПоТаре = 0;
				//НовыйДокумент.ЗаполнитьЭтапыОплатыКлиентом();
				Попытка
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Сообщить("Документ | " + НовыйДокумент.Дата + " | " + НовыйДокумент.Контрагент + " | " + НовыйДокумент.Организация + " | " + НовыйДокумент.СуммаДокумента + " | был успешно создан!");	
				Исключение
					НовыйДокумент.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
					Сообщить("Не удалось провести документ | " + НовыйДокумент.Дата + " | " + НовыйДокумент.Контрагент + " | " + НовыйДокумент.Организация + " | " + НовыйДокумент.СуммаДокумента + ", однако он был записан..");
				КонецПопытки; 
			КонецЕсли; 	
			
		КонецЦикла;
		//?????????????????????????????????????????????????????????????????????????????????????????
		// НЕОБХОДИМА ПРОВЕРКА	
	ИначеЕсли ТипДокумента = "ПоступлениеБезналичныхДС" Тогда
		Для каждого СтрокаТЧ Из Объект.СодержимоеExcelФайлаДоп Цикл
			Если НЕ ВидОперацииПоддерживается(СтрокаТЧ.ВидОперации, ТипДокумента) Тогда
				Сообщить("Вид операции не поддерживается.");
				Продолжить;
			КонецЕсли; 
			Если ДокументУжеСуществует(СтрокаТЧ, ТипДокумента) Тогда
				Сообщить("Документ | " + СтрокаТЧ.Дата + " | " + СтрокаТЧ.Контрагент + " | "  + СтрокаТЧ.Организация + " | " + СтрокаТЧ.СуммаДокумента + " | уже существует!");
			Иначе
				НовыйДокумент = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
				НовыйДокумент.Дата = СтрокаТЧ.Дата;
				НовыйДокумент.ДатаВходящегоДокумента = СтрокаТЧ.Дата;
				НовыйДокумент.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
				НовыйДокумент.ПроведеноБанком = Истина;
				НовыйДокумент.ДатаПроведенияБанком = СтрокаТЧ.Дата;
				НовыйДокумент.Организация = СтрокаТЧ.Организация;
				НовыйДокумент.БанковскийСчет = СтрокаТЧ.СчетОрганизации;
				НовыйДокумент.Контрагент = СтрокаТЧ.Контрагент;
				НовыйДокумент.БанковскийСчетКонтрагента = СтрокаТЧ.СчетКонтрагента;
				НовыйДокумент.СуммаДокумента = СтрокаТЧ.СуммаДокумента;
				НовыйДокумент.Валюта = Справочники.Валюты.НайтиПоНаименованию("RUB");
				НовыйДокумент.НазначениеПлатежа = СтрокаТЧ.НазначениеПлатежа;
				НовыйДокумент.Комментарий = СтрокаТЧ.Комментарий;
				Если СтрокаТЧ.ВидОперации = "Оплата от покупателя" Тогда
					НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
					
					СтрокаРасшифровки = НовыйДокумент.РасшифровкаПлатежа.Добавить();
					// фикс для одинаковых наименований договоров ???
					СтрокаРасшифровки.ОснованиеПлатежа = ПодобратьДоговорДляДокумента(СтрокаТЧ);
					СтрокаРасшифровки.Организация = СтрокаТЧ.Организация;
					СтрокаРасшифровки.Партнер = Справочники.Партнеры.НайтиПоНаименованию(Строка(СтрокаТЧ.Контрагент));
					СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПредопределеннаяСтатьяДДС(НовыйДокумент.ХозяйственнаяОперация, НовыйДокумент.Валюта);
					СтрокаРасшифровки.Сумма = СтрокаТЧ.СуммаДокумента;
					СтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаТЧ.СуммаДокумента;
					СтрокаРасшифровки.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
					СтрокаРасшифровки.СуммаНДС = СтрокаТЧ.СуммаНДС;
				ИначеЕсли СтрокаТЧ.ВидОперации = "Прочее поступление безналичных денежных средств" Тогда
					НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств;
					НовыйДокумент.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПредопределеннаяСтатьяДДС(НовыйДокумент.ХозяйственнаяОперация, НовыйДокумент.Валюта);
					НовыйДокумент.Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию(СтрокаТЧ.Организация);
					НовыйДокумент.СтатьяАктивовПассивов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки;
				КонецЕсли;
				Попытка
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Сообщить("Документ | " + НовыйДокумент.Дата + " | " + НовыйДокумент.Контрагент + " | " + НовыйДокумент.Организация + " | " + НовыйДокумент.СуммаДокумента + " | был успешно создан!");	
				Исключение
					НовыйДокумент.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
					Сообщить("Не удалось провести документ | " + НовыйДокумент.Дата + " | " + НовыйДокумент.Контрагент + " | " + НовыйДокумент.Организация + " | " + НовыйДокумент.СуммаДокумента + ", однако он был записан..");
				КонецПопытки; 
			КонецЕсли; 	
		КонецЦикла;
		//?????????????????????????????????????????????????????????????????????????????????????????
		// НЕОБХОДИМА ПРОВЕРКА 	
	ИначеЕсли ТипДокумента = "СписаниеБезналичныхДС" Тогда
		
		Для каждого СтрокаТЧ Из Объект.СодержимоеExcelФайлаДоп Цикл
			Если НЕ ВидОперацииПоддерживается(СтрокаТЧ.ВидОперации, ТипДокумента) Тогда
				Сообщить("Вид операции не поддерживается.");
				Продолжить;
			КонецЕсли; 
			Если ДокументУжеСуществует(СтрокаТЧ, ТипДокумента) Тогда
				Сообщить("Документ | " + СтрокаТЧ.Дата + " | " + СтрокаТЧ.Контрагент + " | "  + СтрокаТЧ.Организация + " | " + СтрокаТЧ.СуммаДокумента + " | уже существует!");
			Иначе
				НовыйДокумент = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
				//разбиваем на виды операций
				Если СтрокаТЧ.ВидОперации = "Оплата поставщику" Тогда
					
					НовыйДокумент.Дата = СтрокаТЧ.Дата;
					НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
					НовыйДокумент.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
					НовыйДокумент.ДатаВходящегоДокумента = СтрокаТЧ.Дата;
					НовыйДокумент.ПроведеноБанком = Истина;
					НовыйДокумент.Валюта = Справочники.Валюты.НайтиПоНаименованию("RUB");
					НовыйДокумент.ДатаПроведенияБанком = СтрокаТЧ.Дата;
					НовыйДокумент.Контрагент = СтрокаТЧ.Контрагент;
					НовыйДокумент.БанковскийСчетКонтрагента = СтрокаТЧ.СчетКонтрагента;
					НовыйДокумент.Организация = СтрокаТЧ.Организация;
					НовыйДокумент.БанковскийСчет = СтрокаТЧ.СчетОрганизации;
					НовыйДокумент.СуммаДокумента = СтрокаТЧ.СуммаДокумента;
					НовыйДокумент.НазначениеПлатежа = СтрокаТЧ.НазначениеПлатежа;
					НовыйДокумент.Комментарий = СтрокаТЧ.Комментарий;
					
					СтрокаРасшифровки = НовыйДокумент.РасшифровкаПлатежа.Добавить();
					СтрокаРасшифровки.ОбъектРасчетов = Справочники.ОбъектыРасчетов.НайтиПоНаименованию(Строка(СтрокаТЧ.ДоговорКонтрагента));
					СтрокаРасшифровки.ДоговорСЗаказчиком = ПодобратьДоговорДляДокумента(СтрокаТЧ);
					СтрокаРасшифровки.Партнер = Справочники.Партнеры.НайтиПоНаименованию(СтрокаТЧ.Контрагент);
					СтрокаРасшифровки.Сумма = СтрокаТЧ.СуммаДокумента;
					СтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаТЧ.СуммаДокумента;
					СтрокаРасшифровки.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоНаименованию("RUB");
					СтрокаРасшифровки.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
					СтрокаРасшифровки.СуммаНДС = СтрокаТЧ.СуммаНДС;
					СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПредопределеннаяСтатьяДДС(НовыйДокумент.ХозяйственнаяОперация, НовыйДокумент.Валюта);
					
					
				ИначеЕсли СтрокаТЧ.ВидОперации = "Расчеты по кредитам и займам с контрагентами" Тогда
					
					НовыйДокумент.Дата = СтрокаТЧ.Дата;
					НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам;
					НовыйДокумент.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
					НовыйДокумент.ДатаВходящегоДокумента = СтрокаТЧ.Дата;
					НовыйДокумент.ПроведеноБанком = Истина;
					НовыйДокумент.ДатаПроведенияБанком = СтрокаТЧ.Дата;
					НовыйДокумент.Контрагент = СтрокаТЧ.Контрагент;
					НовыйДокумент.БанковскийСчетКонтрагента = СтрокаТЧ.СчетКонтрагента;
					НовыйДокумент.Организация = СтрокаТЧ.Организация;
					НовыйДокумент.БанковскийСчет = СтрокаТЧ.СчетОрганизации;
					НовыйДокумент.СуммаДокумента = СтрокаТЧ.СуммаДокумента;
					НовыйДокумент.НазначениеПлатежа = СтрокаТЧ.НазначениеПлатежа;
					НовыйДокумент.Комментарий = СтрокаТЧ.Комментарий;
					
					СтрокаРасшифровки = НовыйДокумент.РасшифровкаПлатежа.Добавить();
					СтрокаРасшифровки.ДоговорКредитаДепозита = СтрокаТЧ.ДоговорКонтрагента;
					СтрокаРасшифровки.Партнер = Справочники.Партнеры.НайтиПоНаименованию(СтрокаТЧ.Контрагент);
					СтрокаРасшифровки.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг;
					СтрокаРасшифровки.Сумма = СтрокаТЧ.СуммаДокумента;
					СтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаТЧ.СуммаДокумента;
					СтрокаРасшифровки.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоНаименованию("RUB");
					СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПредопределеннаяСтатьяДДС(НовыйДокумент.ХозяйственнаяОперация, НовыйДокумент.Валюта);
					
					//пока делать не буду
					//пугает галка перечисление в бюджет
				ИначеЕсли СтрокаТЧ.ВидОперации = "Перечисление налога" Тогда
					
					
					
				ИначеЕсли СтрокаТЧ.ВидОперации = "Прочее списание безналичных денежных средств" Тогда	
					
					НовыйДокумент.Дата = СтрокаТЧ.Дата;
					НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы;
					НовыйДокумент.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
					НовыйДокумент.ДатаВходящегоДокумента = СтрокаТЧ.Дата;
					НовыйДокумент.ПроведеноБанком = Истина;
					НовыйДокумент.ДатаПроведенияБанком = СтрокаТЧ.Дата;
					НовыйДокумент.Контрагент = СтрокаТЧ.Контрагент;
					НовыйДокумент.БанковскийСчетКонтрагента = СтрокаТЧ.СчетКонтрагента;
					НовыйДокумент.Организация = СтрокаТЧ.Организация;
					НовыйДокумент.БанковскийСчет = СтрокаТЧ.СчетОрганизации;
					НовыйДокумент.СуммаДокумента = СтрокаТЧ.СуммаДокументов;
					НовыйДокумент.НазначениеПлатежа = СтрокаТЧ.НазначениеПлатежа;
					НовыйДокумент.Комментарий = СтрокаТЧ.Комментарий;
					
					СтрокаРасшифровки = НовыйДокумент.РасшифровкаПлатежа.Добавить();
					СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПредопределеннаяСтатьяДДС(НовыйДокумент.ХозяйственнаяОперация, НовыйДокумент.Валюта);
					СтрокаРасшифровки.Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию(СтрокаТЧ.Организация);
					СтрокаРасшифровки.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПредопределенныеСтатьиРасходов();
					СтрокаРасшифровки.АналитикаРасходов = СтрокаТЧ.Организация;
					
				КонецЕсли;
				Попытка
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Сообщить("Документ | " + НовыйДокумент.Дата + " | " + НовыйДокумент.Контрагент + " | " + НовыйДокумент.Организация + " | " + НовыйДокумент.СуммаДокумента + " | был успешно создан!");	
				Исключение
					НовыйДокумент.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
					Сообщить("Не удалось провести документ | " + НовыйДокумент.Дата + " | " + НовыйДокумент.Контрагент + " | " + НовыйДокумент.Организация + " | " + НовыйДокумент.СуммаДокумента + ", однако он был записан..");
				КонецПопытки; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Функция ПодобратьДоговорДляДокумента(Инфо)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Инфо.Контрагент);
	Запрос.УстановитьПараметр("Организация", Инфо.Организация);
	Запрос.УстановитьПараметр("НаименованиеДоговора", Инфо.ДоговорКонтрагента.Наименование);
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Наименование = &НаименованиеДоговора";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 1 Тогда
		Возврат Результат[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
КонецФункции // ()


&НаСервере
Функция ОблагаетсяНДС(Инфо)
	Для каждого Товар Из Инфо Цикл
		Если Товар.НДС <> "Без НДС" Тогда
			Возврат Истина;	
		КонецЕсли; 	
	КонецЦикла;
	Возврат Ложь;
КонецФункции // ()

//для поступления и списание безналичных ДС
&НаСервере
Функция ВидОперацииПоддерживается(ВидОперации, ТипДокумента)
	Если ТипДокумента = "ПоступлениеБезналичныхДС" Тогда
		Если ВидОперации = "Оплата от покупателя" 
			ИЛИ ВидОперации = "Расчеты по кредитам и займам" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "СписаниеБезналичныхДС" Тогда	
		Если ВидОперации = "Оплата поставщику" 
			ИЛИ ВидОперации = "Расчеты по кредитам и займам с контрагентами"
			ИЛИ ВидОперации = "Перечисление налога"
			ИЛИ ВидОперации = "Прочее списание безналичных денежных средств" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
КонецФункции // ()

&НаСервере
Функция ПрисутствуютУслугиВДокументе(МассивНоменклатуры)
	
	Результат = Ложь;
	
	Для каждого Номенклатура Из МассивНоменклатуры Цикл
		
		Если Номенклатура.Услуга = "ДА" Тогда
			
			Результат = Истина;
			Перейти ~ВыходИзЦикла;
			
		КонецЕсли; 	
		
	КонецЦикла; 	
	~ВыходИзЦикла:
	Возврат Результат;
КонецФункции // ()

&НаСервере
Функция ПолучитьСтатьюРасходов(Договор)
	
	Возврат Договор.СтатьяДвиженияДенежныхСредств;
	
КонецФункции // ()

&НаСервере
Функция ДокументУжеСуществует(Инфо, ТипДокумента)
	Запрос = Новый Запрос;
	Попытка
		Запрос.УстановитьПараметр("Дата", НачалоДня(Инфо[0].Дата));
		Запрос.УстановитьПараметр("СуммаДокумента", Инфо[0].СуммаДокумента);
		Запрос.УстановитьПараметр("Контрагент", Инфо[0].Контрагент);
		Запрос.УстановитьПараметр("Организация", Инфо[0].Организация);
		Запрос.УстановитьПараметр("Договор", Строка(Инфо[0].Договор));
	Исключение
		Попытка
			Запрос.УстановитьПараметр("Дата", НачалоДня(Инфо.Дата));
			Запрос.УстановитьПараметр("СуммаДокумента", Инфо.СуммаДокумента);
			Запрос.УстановитьПараметр("Контрагент", Инфо.Контрагент);
			Запрос.УстановитьПараметр("Организация", Инфо.Организация);
			Запрос.УстановитьПараметр("Договор", Строка(Инфо.ДоговорКонтрагента));
		Исключение
			Сообщить("Что-то пошло не так при поиске уже существующих документов...");
			Возврат Неопределено;
		КонецПопытки;	
	КонецПопытки;
	
	СтрокаЗапроса = "ВЫБРАТЬ
	|	Document.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Document КАК Document
	|ГДЕ
	|	НЕ Document.ПометкаУдаления
	|	И Document.Дата = &Дата
	|	И Document.СуммаДокумента = &СуммаДокумента
	|	И Document.Контрагент = &Контрагент
	|	И Document.Организация = &Организация
	|	И Document.Договор.Наименование = &Договор";
	
	СтрокаЗапроса2 = "ВЫБРАТЬ
	|	Document.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Document КАК Document
	|ГДЕ
	|	НЕ Document.ПометкаУдаления
	|	И Document.Дата = &Дата
	|	И Document.СуммаДокумента = &СуммаДокумента
	|	И Document.Контрагент = &Контрагент
	|	И Document.Организация = &Организация
	|	И Document.РасшифровкаПлатежа.ОснованиеПлатежа.Наименование = &Договор";
	
	Если ТипДокумента = "ПриобретениеТоваровИУслуг" Тогда
		
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Document", "ПриобретениеТоваровУслуг");
		
	ИначеЕсли ТипДокумента = "РеализацияТоваровИУслуг" Тогда
		
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Document", "РеализацияТоваровУслуг");
		
	ИначеЕсли ТипДокумента = "ПоступлениеБезналичныхДС" Тогда
		
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса2, "Document", "ПоступлениеБезналичныхДенежныхСредств");
		
	ИначеЕсли ТипДокумента = "СписаниеБезналичныхДС" Тогда
		
		Запрос.Текст = СтрЗаменить(СтрЗаменить(СтрокаЗапроса2, "И Document.РасшифровкаПлатежа.ОснованиеПлатежа.Наименование = &Договор", "И Document.Договор = &Договор"),
		"Document", "СписаниеБезналичныхДенежныхСредств");
		
	КонецЕсли; 
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() <> 0 Тогда
		Возврат Истина;	
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции // ()

&НаСервере
Функция РазделитьИнформациюТЧПоДокументам()
	
	//............................................................................
	//в КоллекцияМассивовДокИнфо находятся коллекция массивов МассивДокИнфо
	//а в МассивДокИнфо находятся ОсновнаяДокИнфо (структура) и ТЧТоварыДокИнфо (массив)
	КоллекцияМассивовДокИнфо = Новый Массив;
	
	Для Индекс = 0 По Объект.СодержимоеExcelФайла.Количество() - 1 Цикл
		
		МассивДокИнфо = Новый Массив;
		
		ОсновнаяДокИнфо = Новый Структура;
		ОсновнаяДокИнфо.Вставить("Дата", Объект.СодержимоеExcelФайла[Индекс].Дата);
		ОсновнаяДокИнфо.Вставить("СуммаДокумента", Объект.СодержимоеExcelФайла[Индекс].СуммаДокумента);
		ОсновнаяДокИнфо.Вставить("Контрагент", Объект.СодержимоеExcelФайла[Индекс].Контрагент);
		ОсновнаяДокИнфо.Вставить("Партнер", Объект.СодержимоеExcelФайла[Индекс].Контрагент);
		ОсновнаяДокИнфо.Вставить("Организация", Объект.СодержимоеExcelФайла[Индекс].Организация);
		ОсновнаяДокИнфо.Вставить("Комментарий", Объект.СодержимоеExcelФайла[Индекс].Комментарий);
		ОсновнаяДокИнфо.Вставить("Договор", Объект.СодержимоеExcelФайла[Индекс].ДоговорКонтрагента);
		ОсновнаяДокИнфо.Вставить("Склад", Объект.СодержимоеExcelФайла[Индекс].Склад);
		
		МассивДокИнфо.Добавить(ОсновнаяДокИнфо);
		
		ТЧТоварыДокИнфо = Новый Массив;
		Счетчик = 1;
		
		Пока НЕ ЗначениеЗаполнено(Объект.СодержимоеExcelФайла[Индекс + Счетчик].Дата) И ЗначениеЗаполнено(Объект.СодержимоеExcelФайла[Индекс + Счетчик].ТоварНоменклатура) Цикл
			
			ТоварАтрибуты = Новый Структура;
			ТоварАтрибуты.Вставить("Номенклатура", Объект.СодержимоеExcelФайла[Индекс + Счетчик].ТоварНоменклатура);
			ТоварАтрибуты.Вставить("Количество", Объект.СодержимоеExcelФайла[Индекс + Счетчик].ТоварКоличество);
			ТоварАтрибуты.Вставить("Цена", Объект.СодержимоеExcelФайла[Индекс + Счетчик].ТоварЦена);
			ТоварАтрибуты.Вставить("Сумма", Объект.СодержимоеExcelФайла[Индекс + Счетчик].ТоварСумма);
			ТоварАтрибуты.Вставить("НДС", Объект.СодержимоеExcelФайла[Индекс + Счетчик].ТоварНДС);
			ТоварАтрибуты.Вставить("СуммаНДС", Объект.СодержимоеExcelФайла[Индекс + Счетчик].ТоварСуммаНДС);
			ТоварАтрибуты.Вставить("Услуга", Объект.СодержимоеExcelФайла[Индекс + Счетчик].ТоварУслуга);
			
			ТЧТоварыДокИнфо.Добавить(ТоварАтрибуты);
			
			Счетчик = Счетчик + 1;
			
			Если Индекс + Счетчик > Объект.СодержимоеExcelФайла.Количество() - 1 Тогда
				
				Перейти ~ВыходИзЦиклаПока;		
				
			КонецЕсли;
			
		КонецЦикла;
		
		~ВыходИзЦиклаПока:
		МассивДокИнфо.Добавить(ТЧТоварыДокИнфо);
		КоллекцияМассивовДокИнфо.Добавить(МассивДокИнфо);
		Индекс = Индекс + Счетчик - 1;
		
		Если Индекс > Объект.СодержимоеExcelФайла.Количество() - 1 Тогда
			
			Перейти ~ВыходИзЦиклаДля;		
			
		КонецЕсли; 
		
	КонецЦикла;
	
	~ВыходИзЦиклаДля:
	Возврат КоллекцияМассивовДокИнфо;
	
КонецФункции // ()

&НаКлиенте
Процедура СодержимоеExcelФайла1ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеСтроки = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	НеобходимыеДанныеСтроки = Новый Структура;
	НеобходимыеДанныеСтроки.Вставить("Контрагент", ДанныеСтроки.Контрагент);
	НеобходимыеДанныеСтроки.Вставить("Организация", ДанныеСтроки.Организация);
	ОтборИнфо = ПолучитьИнфоОбОтбореДляДоговораКонтрагента(НеобходимыеДанныеСтроки);
	Форма = ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ОтборИнфо.Контрагент;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ОтборИнфо.Организация;
	ЭлементОтбора.Использование = Истина;
КонецПроцедуры 

&НаСервере
Функция ПолучитьИнфоОбОтбореДляДоговораКонтрагента(Структура)
	ОтборИнфо = Новый Структура;
	ОтборИнфо.Вставить("Контрагент", Справочники.Контрагенты.НайтиПоНаименованию(Структура.Контрагент));
	ОтборИнфо.Вставить("Организация", Справочники.Организации.НайтиПоНаименованию(Структура.Организация));
	Возврат ОтборИнфо;
КонецФункции // ()

&НаКлиенте
Процедура СодержимоеExcelФайлаДопСчетОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеСтроки = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	НеобходимыеДанныеСтроки = Новый Структура;
	НеобходимыеДанныеСтроки.Вставить("Организация", ДанныеСтроки.Организация);
	ОтборИнфо = ПолучитьИнфоОбОтбореДляСчетаОрганизации(НеобходимыеДанныеСтроки);
	Форма = ОткрытьФорму("Справочник.БанковскиеСчетаОрганизаций.ФормаВыбора",,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ОтборИнфо.Организация;
	ЭлементОтбора.Использование = Истина;
КонецПроцедуры

&НаСервере
Функция ПолучитьИнфоОбОтбореДляСчетаОрганизации(Структура)
	ОтборИнфо = Новый Структура;
	ОтборИнфо.Вставить("Организация", Справочники.Организации.НайтиПоНаименованию(Структура.Организация));
	Возврат ОтборИнфо;
КонецФункции // ()

// доработать при необходимости 
&НаСервере
Процедура СоздатьНеНайденнуюНоменклатуруНаСервере()
	Если Объект.СодержимоеExcelФайла.Количество() = 0 Тогда
		Сообщить("Табличная часть, где могут присутствовать товары не заполнена.");
		Возврат;
	КонецЕсли; 
	ПутьExcel = ЭтаФорма.Элементы.ПутьExcel.ТекстРедактирования;
	ФайлExcel = Новый Файл(ПутьExcel);
	Если НЕ ФайлExcel.Существует() Тогда
		Сообщить("Excel-файл не найден.");
		Возврат;
	КонецЕсли;
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьExcel);
	ДанныеExcel = Новый Структура;
	ДанныеExcel.Вставить("Расширение", ФайлExcel.Расширение);
	ДанныеExcel.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	//ДанныеExcel.Вставить("ТипДокумента", ТипДокумента);  //исправить ошибку :)
	ТЗ = ПрочитатьExcel(ДанныеExcel, "СоздатьНеНайденнуюНоменклатуру");
	Для каждого СтрокаТЗ Из ТЗ Цикл
		Если НайтиНоменклатуру(СтрокаТЗ.ТоварНоменклатура) Тогда
			Продолжить;	
		Иначе
			НоменклатураУслуга = ЯвляетсяУслугой(СтрокаТЗ.ТоварУслуга);
			Если НоменклатураУслуга = Неопределено Тогда
				Сообщить("Произошла непредвиденная ошибка при создании номенклатуры: " + СтрокаТЗ.ТоварНоменклатура);
				Возврат;
			КонецЕсли;
			//НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
			Если НоменклатураУслуга Тогда
				//НоваяНоменклатура.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга");
			Иначе	
				//НоваяНоменклатура.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар");
				//НоваяНоменклатура.Наименование = 
				//НоваяНоменклатура.НаименованиеПолное =
				//НоваяНоменклатура.
			КонецЕсли;
		КонецЕсли; 	
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНеНайденнуюНоменклатуру(Команда)
	СоздатьНеНайденнуюНоменклатуруНаСервере();
КонецПроцедуры

&НаСервере
Функция НайтиНоменклатуру(НаименованиеНоменклатуры)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", НаименованиеНоменклатуры);
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
КонецФункции // ()

&НаСервере
Функция ЯвляетсяУслугой(Услуга)
	Если Услуга = "ДА" Тогда
		Возврат Истина;
	ИначеЕсли Услуга = "НЕТ" Тогда
		Возврат Ложь;
	Иначе	
		Возврат Неопределено;
	КонецЕсли; 
КонецФункции // ()


//Для разработки...
&НаСервере
Процедура ЗаполнитьТестовымиДаннымиНаСервере()
	Объект.ТипДокумента = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию("Приобретение товаров и услуг (Документ)");
	Для каждого СтрокаТЧ Из Объект.СодержимоеExcelФайла Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Дата) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ТоварНоменклатура) Тогда
			
			СтрокаТЧ.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("СПРИНТ ПРЕСС");
			СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("ТЕСТ_ТЕСТ_ТЕСТ");
			СтрокаТЧ.Организация = Справочники.Организации.НайтиПоНаименованию("Сервис-Менеджмент");
			СтрокаТЧ.Склад = Справочники.Склады.НайтиПоНаименованию("Центральный склад");
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Дата) И ЗначениеЗаполнено(СтрокаТЧ.ТоварЦена) Тогда
			СтрокаТЧ.ТоварНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Трактор");
		КонецЕсли; 	
		
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТестовымиДанными(Команда)
	ЗагрузитьДанныеИзExcel(Команда);
	ЗаполнитьТестовымиДаннымиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДозаполнятьНехваткуСкладовНаСервере()
	Для каждого СтрокаТЧ Из Объект.СодержимоеExcelФайла Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Дата) И НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Объект.СкладДляАвтозаполнения;	
		КонецЕсли; 	
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнятьНехваткуСкладов(Команда)
	ДозаполнятьНехваткуСкладовНаСервере();
КонецПроцедуры

//Для разработки (страница) пока для реализации и приобретения товаров и услуг
&НаСервере
Процедура НайтиДокументыДляРазработчикаНаСервере()
	Объект.ДляРазработчика.Очистить();
	Объект.ДляРазработчика2.Очистить();
	ТипДокумента = Объект.ТипДокументаДляРазработчика.Наименование;
	Если НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
		Сообщить("ДЛЯ РАЗРАБОТЧИКА - заполните Тип документа.");
		Возврат;	
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Объект.КонтрагентДляРазработчика);
	Запрос.УстановитьПараметр("Организация", Объект.ОрганизацияДляРазработчика);
	Запрос.УстановитьПараметр("Склад", Объект.СкладДляРазработчика);
	Запрос.УстановитьПараметр("ДатаНачало", Объект.ДатаНачалоДляРазработчика);
	Запрос.УстановитьПараметр("ДатаКонец", Объект.ДатаКонецДляРазработчика);
	
	СтрокаЗапроса = "ВЫБРАТЬ
	|	Document.Ссылка КАК Ссылка,
	|	Document.Дата КАК Дата,
	|	Document.СуммаДокумента КАК СуммаДокумента,
	|	Document.Контрагент КАК Контрагент,
	|	Document.Организация КАК Организация,
	|	Document.Склад КАК Склад
	|ИЗ
	|	Документ.Document КАК Document
	|ГДЕ
	|	НЕ Document.ПометкаУдаления
	|	И Document.Проведен
	|	И Document.Контрагент = &Контрагент
	|	И Document.Организация = &Организация
	|	И Document.Склад = &Склад
	|	И Document.Дата МЕЖДУ &ДатаНачало И &ДатаКонец";
	
	СтрокаЗапроса2 = "ВЫБРАТЬ
	|	Document.Ссылка КАК Ссылка,
	|	Document.Дата КАК Дата,
	|	Document.СуммаДокумента КАК СуммаДокумента,
	|	Document.Контрагент КАК Контрагент,
	|	Document.Организация КАК Организация
	|ИЗ
	|	Документ.Document КАК Document
	|ГДЕ 
	|	НЕ Document.ПометкаУдаления
	|	И Document.Проведен
	|	И Document.Контрагент = &Контрагент
	|	И Document.Организация = &Организация
	| 	И Document.Дата МЕЖДУ &ДатаНачало И &ДатаКонец";
	
	Если НЕ ЗначениеЗаполнено(Объект.КонтрагентДляРазработчика) Тогда
		СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, "И Document.Контрагент = &Контрагент", "");
		СтрокаЗапроса2 = СтрЗаменить(СтрокаЗапроса2, "И Document.Контрагент = &Контрагент", "");
	КонецЕсли; 
	
	Если ТипДокумента = "Приобретение товаров и услуг (Документ)" Тогда
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Document", "ПриобретениеТоваровУслуг");
	ИначеЕсли ТипДокумента = "Реализация товаров и услуг (Документ)" Тогда	
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Document", "РеализацияТоваровУслуг");
	ИначеЕсли ТипДокумента = "Поступление безналичных денежных средств (Документ)" Тогда
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса2, "Document", "ПоступлениеБезналичныхДенежныхСредств");
	ИначеЕсли ТипДокумента = "Списание безналичных денежных средств (Документ)" Тогда
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса2, "Document", "СписаниеБезналичныхДенежныхСредств");
	Иначе
		Сообщить("ДЛЯ РАЗРАБОТЧИКА - Указанный тип документа не поддерживается.");
		Возврат;
	КонецЕсли; 
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ТипДокумента = "Приобретение товаров и услуг (Документ)" ИЛИ 
		ТипДокумента = "Реализация товаров и услуг (Документ)" Тогда
		Для каждого СтрокаТЗ Из Результат Цикл
			СтрокаТЧ = Объект.ДляРазработчика.Добавить();
			СтрокаТЧ.Ссылка = СтрокаТЗ.Ссылка;
			СтрокаТЧ.Модифицировать = Ложь;
			СтрокаТЧ.Дата = СтрокаТЗ.Дата;
			СтрокаТЧ.Сумма = СтрокаТЗ.СуммаДокумента;
			СтрокаТЧ.Контрагент = СтрокаТЗ.Контрагент;
			СтрокаТЧ.Организация = СтрокаТЗ.Организация;
			СтрокаТЧ.Склад = СтрокаТЗ.Склад;
		КонецЦикла; 
	ИначеЕсли ТипДокумента = "Поступление безналичных денежных средств (Документ)" 
		ИЛИ ТипДокумента = "Списание безналичных денежных средств (Документ)" Тогда	
		Для каждого СтрокаТЗ Из Результат Цикл
			СтрокаТЧ = Объект.ДляРазработчика2.Добавить();
			СтрокаТЧ.Ссылка = СтрокаТЗ.Ссылка;
			СтрокаТЧ.Модифицировать = Ложь;
			СтрокаТЧ.Дата = СтрокаТЗ.Дата;
			СтрокаТЧ.Сумма = СтрокаТЗ.СуммаДокумента;
			СтрокаТЧ.Контрагент = СтрокаТЗ.Контрагент;
			СтрокаТЧ.Организация = СтрокаТЗ.Организация;
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура НайтиДокументыДляРазработчика(Команда)
	НайтиДокументыДляРазработчикаНаСервере();
КонецПроцедуры

&НаСервере
Процедура МодифицироватьВыбранныеНаСервере()
	ТипДокумента = Объект.ТипДокументаДляРазработчика.Наименование;
	Если НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
		Сообщить("ДЛЯ РАЗРАБОТЧИКА - Заполните поле тип документа.");	
		Возврат;
	КонецЕсли;
	Если ТипДокумента = "Реализация товаров и услуг (Документ)" Тогда
		Для каждого СтрокаТЧ Из Объект.ДляРазработчика Цикл
			Если СтрокаТЧ.Модифицировать Тогда
				Попытка
					Документ = СтрокаТЧ.Ссылка.ПолучитьОбъект();
					
					Если Объект.ПоменятьСкладДляРазработчика Тогда
						Документ.Склад = Объект.ДругойСкладДляРазработчика;	
					КонецЕсли;
					
					Документ.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
					Документ.ВремяДоставкиС = Дата(1,1,1);
					Документ.ВремяДоставкиПо = Дата(1,1,1);
					Документ.ВернутьМногооборотнуюТару = Ложь;
					Документ.Курсчислитель = 1; //курс заменен на курсчислитель
					Документ.Курсзнаменатель = 1; //кратность заменена на курсзнаменатель
					Документ.Согласован = Истина;
					Документ.СкидкиРассчитаны = Ложь;
					Документ.РеализацияПоЗаказам = Ложь;
					Документ.УдалитьДатаРаспоряжения = Дата(1,1,1);
					Документ.ДоверенностьДата = Дата(1,1,1);
					Документ.Валюта = Справочники.Валюты.НайтиПоНаименованию("RUB");
					Документ.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоНаименованию("RUB");
					Документ.ЦенаВключаетНДС = Истина;
					Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
					Документ.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
					Документ.Менеджер = ПользователиКлиентСервер.ТекущийПользователь();
					Документ.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
					Документ.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
					Документ.Автор = ПользователиКлиентСервер.ТекущийПользователь();
					Документ.ДатаВозвратаМногооборотнойТары = КонецГода(СтрокаТЧ.Дата);
					Документ.ВидыЗапасовУказаныВручную = Ложь;
					Документ.ТребуетсяЗалогЗаТару = Ложь;
					Документ.ОснованиеДата = Дата("20190101");
					Документ.ДатаПереходаПраваСобственности = Дата(1,1,1);
					Документ.ОсобыеУсловияПеревозки = Ложь;
					Документ.ЕстьМаркируемаяПродукцияГИСМ = Ложь;
					Документ.УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС = Ложь;
					Документ.ОплатаВВалюте = Ложь;	
					
					Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Сообщить(Строка(Документ.Ссылка) + " был модифицирован.");	
					
				Исключение
					Сообщить(ОписаниеОшибки()); 	
				КонецПопытки; 
				
			КонецЕсли; 	
		КонецЦикла;
	ИначеЕсли ТипДокумента = "Приобретение товаров и услуг (Документ)" Тогда
		// пока пусто
	ИначеЕсли ТипДокумента = "Поступление безналичных денежных средств (Документ)" Тогда
		// пока пусто
	Иначе
		Сообщить("ДЛЯ РАЗРАБОТЧИКА - Указанный тип документа не поддерживается.");
		Возврат;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура МодифицироватьВыбранные(Команда)
	МодифицироватьВыбранныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	Для каждого СтрокаТЧ Из Объект.ДляРазработчика Цикл
		СтрокаТЧ.Модифицировать = НЕ СтрокаТЧ.Модифицировать;	
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеВыбранныеНаСервере()
	Для каждого СтрокаТЧ Из Объект.ДляРазработчика Цикл
		Если СтрокаТЧ.Модифицировать Тогда
			ДокументНаУдаление = СтрокаТЧ.Ссылка.ПолучитьОбъект();
			ДокументНаУдаление.УстановитьПометкуУдаления(Истина);
		КонецЕсли; 	
	КонецЦикла;
	Для каждого СтрокаТЧ Из Объект.ДляРазработчика2 Цикл
		Если СтрокаТЧ.Модифицировать Тогда
			ДокументНаУдаление = СтрокаТЧ.Ссылка.ПолучитьОбъект();
			ДокументНаУдаление.УстановитьПометкуУдаления(Истина);
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеВыбранные(Команда)
	Попытка
		ПометитьНаУдалениеВыбранныеНаСервере();
	Исключение
		Инфо = ИнформацияОбОшибке();
		ИнфоОписание = Инфо.Описание;
		ИнфоИмяМодуля = Инфо.ИмяМодуля;
		ИнфоНомерСтроки = Инфо.НомерСтроки;
		ИнфоИсходнаяСтрока = Инфо.ИсходнаяСтрока;
		ТекстСообщенияОшибки = ИнфоОписание + Символы.ПС + ИнфоИмяМодуля + Символы.ПС + 
		ИнфоНомерСтроки + Символы.ПС + ИнфоИсходнаяСтрока;
		ПоказатьПредупреждение(,НСтр("ru = 'Операция не может быть выполнена по причине:'") + Символы.ПС + ТекстСообщенияОшибки);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе2(Команда)
	Для каждого СтрокаТЧ Из Объект.ДляРазработчика2 Цикл
		СтрокаТЧ.Модифицировать = НЕ СтрокаТЧ.Модифицировать;
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыФормыНаСервере()
	Если Объект.ДляРазработчика.Количество() <> 0 Тогда
		Документ = Объект.ДляРазработчика[0].Ссылка.ПолучитьОбъект();
		Для каждого Реквизит Из Документ.Метаданные().Реквизиты Цикл
			
			//Сообщить(Реквизит.Имя + " = " + Документ.Реквизит.Имя);
			СтрокаРеквизита = Объект.ДляРазработчикаРеквизитыФормы.Добавить();
			СтрокаРеквизита.ИмяРеквизита = Строка(Реквизит.Имя);
			СтрокаРеквизита.ЗначениеРеквизита =	Строка(Документ[Реквизит.Имя]); 
			СтрокаРеквизита.ТипРеквизита = ?(Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]) <> Неопределено, Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]).ПолноеИмя(), Реквизит.Тип);
			
		КонецЦикла; 
		Для каждого ТЧ Из Документ.Метаданные().ТабличныеЧасти Цикл
			
			СтрокаТЧИмя = Объект.ДляРазработчикаРеквизитыТЧФормы.Добавить();
			СтрокаТЧИмя.ИмяТабличнойЧасти = Строка(ТЧ.Имя);
			
			Для Индекс = 0 По Документ[ТЧ.Имя].Количество() - 1 Цикл
				
				Для каждого Реквизит Из ТЧ.Реквизиты Цикл
					
					СтрокаРеквизитаСтрокиТЧ = Объект.ДляРазработчикаРеквизитыТЧФормы.Добавить();
					СтрокаРеквизитаСтрокиТЧ.ИмяРеквизита = Строка(Реквизит);
					СтрокаРеквизитаСтрокиТЧ.ЗначениеРеквизита = Строка(Документ[ТЧ.Имя][Индекс][Реквизит.Имя]);
					СтрокаРеквизитаСтрокиТЧ.ТипРеквизита = Документ[ТЧ.Имя][Индекс][?(Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]) <> Неопределено, Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]).ПолноеИмя(), Реквизит.Тип)];
					
				КонецЦикла; 	
				
			КонецЦикла;
			
			СтрокаРазделитель = Объект.ДляРазработчикаРеквизитыТЧФормы.Добавить();
			СтрокаРазделитель.ИмяТабличнойЧасти = "-----------------------------------------------------------";
			СтрокаРазделитель.ИмяРеквизита = "-----------------------------------------------------------";
			СтрокаРазделитель.ЗначениеРеквизита = "-----------------------------------------------------------";
			СтрокаРазделитель.ТипРеквизита = "-----------------------------------------------------------";
			
		КонецЦикла; 
	ИначеЕсли Объект.ДляРазработчика2.Количество() <> 0 Тогда	
		Документ =	Объект.ДляРазработчика2[0].Ссылка.ПолучитьОбъект();
		Для каждого Реквизит Из Документ.Метаданные().Реквизиты Цикл
			
			//Сообщить(Реквизит.Имя + " = " + Документ[Реквизит.Имя]);	
			СтрокаРеквизита = Объект.ДляРазработчикаРеквизитыФормы.Добавить();
			СтрокаРеквизита.ИмяРеквизита = Строка(Реквизит.Имя);
			СтрокаРеквизита.ЗначениеРеквизита =	Строка(Документ[Реквизит.Имя]);
			СтрокаРеквизита.ТипРеквизита = ?(Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]) <> Неопределено, Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]).ПолноеИмя(), Реквизит.Тип);
			
		КонецЦикла; 
		Для каждого ТЧ Из Документ.Метаданные().ТабличныеЧасти Цикл
			
			СтрокаТЧИмя = Объект.ДляРазработчикаРеквизитыТЧФормы.Добавить();
			СтрокаТЧИмя.ИмяТабличнойЧасти = Строка(ТЧ.Имя);
			
			Для Индекс = 0 По Документ[ТЧ.Имя].Количество() - 1 Цикл
				
				Для каждого Реквизит Из ТЧ.Реквизиты Цикл
					
					СтрокаРеквизитаСтрокиТЧ = Объект.ДляРазработчикаРеквизитыТЧФормы.Добавить();
					СтрокаРеквизитаСтрокиТЧ.ИмяРеквизита = Строка(Реквизит.Имя);
					СтрокаРеквизитаСтрокиТЧ.ЗначениеРеквизита = Строка(Документ[ТЧ.Имя][Индекс][Реквизит.Имя]);
					СтрокаРеквизитаСтрокиТЧ.ТипРеквизита = ?(Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]) <> Неопределено, Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]).ПолноеИмя(), Реквизит.Тип);
					
				КонецЦикла; 	
				
			КонецЦикла;
			
			СтрокаРазделитель = Объект.ДляРазработчикаРеквизитыТЧФормы.Добавить();
			СтрокаРазделитель.ИмяТабличнойЧасти = "-----------------------------------------------------------";
			СтрокаРазделитель.ИмяРеквизита = "-----------------------------------------------------------";
			СтрокаРазделитель.ЗначениеРеквизита = "-----------------------------------------------------------";
			СтрокаРазделитель.ТипРеквизита = "-----------------------------------------------------------";
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРеквизитыФормы(Команда)
	Если Объект.ДляРазработчика.Количество() = 0 И Объект.ДляРазработчика2.Количество() = 0 Тогда
		Сообщить("ДЛЯ РАЗРАБОТЧИКА - Отсутствуют документ для проверки реквизитов формы...");
		Возврат;
	КонецЕсли;
	Объект.ДляРазработчикаРеквизитыФормы.Очистить();
	Объект.ДляРазработчикаРеквизитыТЧФормы.Очистить();
	Попытка
		ПроверитьРеквизитыФормыНаСервере();
	Исключение
		Инфо = ИнформацияОбОшибке();
		ИнфоОписание = Инфо.Описание;
		ИнфоИмяМодуля = Инфо.ИмяМодуля;
		ИнфоНомерСтроки = Инфо.НомерСтроки;
		ИнфоИсходнаяСтрока = Инфо.ИсходнаяСтрока;
		ТекстСообщенияОшибки = ИнфоОписание + Символы.ПС + ИнфоИмяМодуля + Символы.ПС + 
		ИнфоНомерСтроки + Символы.ПС + ИнфоИсходнаяСтрока;
		ПоказатьПредупреждение(,НСтр("ru = 'Операция не может быть выполнена по причине:'") + Символы.ПС + ТекстСообщенияОшибки);
	КонецПопытки; 
КонецПроцедуры
