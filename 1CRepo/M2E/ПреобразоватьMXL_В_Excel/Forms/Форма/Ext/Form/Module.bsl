Перем RegExp;

Процедура КнопкаВыполнитьНажатие(Кнопка)
	ТекстОшибки = ПроверитьЗаполненностьФормы();
	Если ТекстОшибки <> Неопределено Тогда
		Сообщить(ТекстОшибки);
		Возврат;
	КонецЕсли;
	ПутьMXL = ЭтаФорма.ЭлементыФормы.ПутьMXL.Значение;
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьMXL);
	ФайлMXL = Новый Файл(ПутьMXL);
	Если НЕ ФайлMXL.Существует() Тогда
		Сообщить("MXL-файл не найден.");
		Возврат;
	КонецЕсли;	
	ДанныеMXL = Новый Структура;
	ДанныеMXL.Вставить("Расширение", ФайлMXL.Расширение);
	ДанныеMXL.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	ТЗ = ПрочитатьMXL(ДанныеMXL);
	РежимПреобразования = Строка(ЭтаФорма.ЭлементыФормы.ТипДокументов.Значение);
	ПреобразоватьТЗВExcel(ТЗ, РежимПреобразования);		
КонецПроцедуры

Функция ПроверитьЗаполненностьФормы()
	// пока что так
	Если Строка(ЭтаФорма.ЭлементыФормы.ТипДокументов.Значение) = "" Тогда 
		Возврат "Укажите конкретный тип документа.";
	КонецЕсли;
	Разделитель = ", ";
	ТекстПредупреждения = "Поля fields не заполнены!";
	МассивНезаполненныхПолей = Новый Массив;
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ПутьMXL.Значение) Тогда
		МассивНезаполненныхПолей.Добавить(ЭлементыФормы.ПутьMXL.Имя);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.НазваниеExcelФайла.Значение) Тогда
		МассивНезаполненныхПолей.Добавить(ЭлементыФормы.НазваниеExcelФайла.Имя);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ПутьExcel.Значение) Тогда
		МассивНезаполненныхПолей.Добавить(ЭлементыФормы.ПутьExcel.Имя);
	КонецЕсли;
	Если ЭлементыФормы.ТипДокументов = "" Тогда
		МассивНезаполненныхПолей.Добавить(ЭлементыФормы.ТипДокументов.Имя);
	КонецЕсли;
	Если МассивНезаполненныхПолей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		НезаполненныеПоляСтр = "";
		Для каждого Элемент Из МассивНезаполненныхПолей Цикл
			Попытка
				НезаполненныеПоляСтр = НезаполненныеПоляСтр + Элемент + Разделитель;
			Исключение
			КонецПопытки;
		КонецЦикла;
		Возврат СтрЗаменить(ТекстПредупреждения, "fields", НезаполненныеПоляСтр);
	КонецЕсли;
КонецФункции

Функция ПрочитатьMXL(ДанныеMXL) Экспорт
	ФайлMXLВременный = ПолучитьИмяВременногоФайла(ДанныеMXL.Расширение);
	ДанныеMXL.ДвоичныеДанные.Записать(ФайлMXLВременный);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ФайлMXLВременный);
	УдалитьФайлы(ФайлMXLВременный);
	ОбластьТаблицы = ТабличныйДокумент.Область(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьТаблицы);
	ПостроительЗапроса.Выполнить();
	Возврат ПостроительЗапроса.Результат.Выгрузить();
КонецФункции

Процедура ПреобразоватьТЗВExcel(ТЗ, РежимПреобразования, РежимРаботы = Неопределено)
	Если РежимПреобразования = "0" ИЛИ РежимПреобразования = "1" Тогда
		ДополненнаяТЗ = Новый ТаблицаЗначений;
		Для Индекс = 0 По ТЗ.Колонки.Количество() - 1 Цикл
			ДополненнаяТЗ.Колонки.Добавить(ТЗ.Колонки[Индекс].Имя, ТЗ.Колонки[Индекс].ТипЗначения);
		КонецЦикла;	
		// Пока только для ПриобретениеТоваровИУслуг \ ПоставлениеТоваровУслуг
		// И также РеализацияТоваровИУслуг
		Если ДополненнаяТЗ.Колонки.Найти("ДоговорКонтрагента") = Неопределено Тогда
			ДополненнаяТЗ.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		ДополненнаяТЗ.Колонки.Добавить("ТоварНоменклатура", Новый ОписаниеТипов("Строка"));
		ДополненнаяТЗ.Колонки.Добавить("ТоварКоличество", Новый ОписаниеТипов("Число"));
		ДополненнаяТЗ.Колонки.Добавить("ТоварЦена", Новый ОписаниеТипов("Число"));
		ДополненнаяТЗ.Колонки.Добавить("ТоварСумма", Новый ОписаниеТипов("Число"));
		ДополненнаяТЗ.Колонки.Добавить("ТоварНДС", Новый ОписаниеТипов("Строка"));
		ДополненнаяТЗ.Колонки.Добавить("ТоварСуммаНДС", Новый ОписаниеТипов("Число"));
		ДополненнаяТЗ.Колонки.Добавить("ТоварУслуга", Новый ОписаниеТипов("Строка"));
		//Индекс = 1;
		Для каждого СтрТЗ из ТЗ Цикл
			//Сообщить(Индекс);
			//Индекс = Индекс + 1;
			//проверяем на заполненность строки
			Если НЕ ЗначениеЗаполнено(СтрТЗ.Дата) ИЛИ НЕ ЗначениеЗаполнено(СтрТЗ.Номер)
				ИЛИ НЕ ЗначениеЗаполнено(СтрТЗ.Сумма) ИЛИ НЕ ЗначениеЗаполнено(СтрТЗ.Контрагент)
				ИЛИ НЕ ЗначениеЗаполнено(СтрТЗ.Организация) Тогда
				Продолжить;
			КонецЕсли;
			ДокБазаИнфо = ПолучитьИнформациюОДокВБазе(СтрТЗ, РежимПреобразования);
			Если ДокБазаИнфо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ДокБазаИнфо.ПометкаНаУдаление Тогда
				Продолжить;
			КонецЕсли;
			СтрДопТЗ = ДополненнаяТЗ.Добавить();
			СтрДопТЗ.Дата = СтрТЗ.Дата;
			СтрДопТЗ.ВидОперации = СтрТЗ.ВидОперации;
			СтрДопТЗ.Сумма = СтрТЗ.Сумма;
			СтрДопТЗ.Контрагент = СтрТЗ.Контрагент;
			СтрДопТЗ.Организация = СтрТЗ.Организация;
			СтрДопТЗ.Склад = СтрТЗ.Склад;
			СтрДопТЗ.Комментарий = СтрТЗ.Комментарий;
			Попытка
				СтрДопТЗ.ДоговорКонтрагента = СтрТЗ.ДоговорКонтрагента;	
			Исключение
				СтрДопТЗ.ДоговорКонтрагента = ДокБазаИнфо.Документ.ДоговорКонтрагента;
			КонецПопытки;
			ИнформацияОНоменклатуре = ПоместитьДопИнфоВТЗ(ДокБазаИнфо.Документ);
			ДополнитьТЗ = ?(ИнформацияОНоменклатуре = Неопределено, Ложь, Истина);
			Если ДополнитьТЗ Тогда
				Для каждого СтрИнфо ИЗ ИнформацияОНоменклатуре Цикл
					ДопСтрДопТЗ = ДополненнаяТЗ.Добавить();
					ДопСтрДопТЗ.ТоварНоменклатура = СтрИнфо.Номенклатура;
					ДопСтрДопТЗ.ТоварКоличество = СтрИнфо.Количество;
					ДопСтрДопТЗ.ТоварЦена = СтрИнфо.Цена;
					ДопСтрДопТЗ.ТоварСумма = СтрИнфо.Сумма;
					ДопСтрДопТЗ.ТоварНДС = СтрИнфо.НДС;
					ДопСтрДопТЗ.ТоварСуммаНДС = СтрИнфо.СуммаНДС;
					ДопСтрДопТЗ.ТоварУслуга = СтрИнфо.Услуга;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли РежимПреобразования = "2" ИЛИ РежимПреобразования = "3" Тогда
		ДополненнаяТЗ = Новый ТаблицаЗначений;
		Для Индекс = 0 По ТЗ.Колонки.Количество() - 1 Цикл
			ДополненнаяТЗ.Колонки.Добавить(ТЗ.Колонки[Индекс].Имя, ТЗ.Колонки[Индекс].ТипЗначения);
		КонецЦикла;
		
		ДополненнаяТЗ.Колонки.Добавить("СчетКонтрагента", Новый ОписаниеТипов("Строка"));
		ДополненнаяТЗ.Колонки.Добавить("НомерСчетаБанкаОрганизации", Новый ОписаниеТипов("Строка"));
		ДополненнаяТЗ.Колонки.Добавить("НомерСчетаБанкаКонтрагента", Новый ОписаниеТипов("Строка"));
		ДополненнаяТЗ.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("Строка"));
		ДополненнаяТЗ.Колонки.Добавить("НДС", Новый ОписаниеТипов("Строка"));
		ДополненнаяТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Строка"));
		Если ДополненнаяТЗ.Колонки.Найти("НазначениеПлатежа") = Неопределено Тогда
			ДополненнаяТЗ.Колонки.Добавить("НазначениеПлатежа", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		Для каждого СтрТЗ Из ТЗ Цикл 
			Попытка
				//для ПлатежноеПоручениеВходящее
				Если НЕ ЗначениеЗаполнено(СтрТЗ.Дата) ИЛИ НЕ ЗначениеЗаполнено(СтрТЗ.Номер)
					ИЛИ НЕ ЗначениеЗаполнено(СтрТЗ.СуммаДокумента) ИЛИ НЕ ЗначениеЗаполнено(СтрТЗ.Контрагент)
					ИЛИ НЕ ЗначениеЗаполнено(СтрТЗ.Организация) Тогда
					Продолжить;
				КонецЕсли;
			Исключение
				//для ПлатежноеПоручениеИсходящее
				Если НЕ ЗначениеЗаполнено(СтрТЗ.ДатаОплаты) ИЛИ НЕ ЗначениеЗаполнено(СтрТЗ.Номер)
					ИЛИ НЕ ЗначениеЗаполнено(СтрТЗ.Сумма) ИЛИ НЕ ЗначениеЗаполнено(СтрТЗ.Контрагент)
					ИЛИ НЕ ЗначениеЗаполнено(СтрТЗ.Организация) Тогда
					Продолжить;
				КонецЕсли;
			КонецПопытки;
			ДокБазаИнфо = ПолучитьИнформациюОДокВБазе(СтрТЗ, РежимПреобразования);
			Если ДокБазаИнфо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ДокБазаИнфо.ПометкаНаУдаление Тогда
				Продолжить;
			КонецЕсли;
			СтрДопТЗ = ДополненнаяТЗ.Добавить();
			//
			Попытка
				СтрДопТЗ.Дата = СтрТЗ.Дата;
			Исключение
				СтрДопТЗ.ДатаОплаты = СтрТЗ.ДатаОплаты;
			КонецПопытки; 
			//Для каждого ТЧ из ДокБазаИнфо.Документ.Метаданные().ТабличныеЧасти Цикл
			//	Для каждого Стр Из ТЧ.Реквизиты Цикл
			//		Сообщить(Стр);
			//	КонецЦикла;
			//КонецЦикла;
			//Для Индекс = 0 По ДокБазаИнфо.Документ.РасшифровкаПлатежа.Количество() - 1 Цикл
			//	Для каждого Бра Из ДокБазаИнфо.Документ.РасшифровкаПлатежа[Индекс] Цикл
			//		Сообщить(Бра);
			//	КонецЦикла;
			//КонецЦикла;
			СтрДопТЗ.НДС = ДокБазаИнфо.Документ.РасшифровкаПлатежа[0].СтавкаНДС;
			СтрДопТЗ.СуммаНДС = ДокБазаИнфо.Документ.РасшифровкаПлатежа[0].СуммаНДС;
			СтрДопТЗ.ВидОперации = СтрТЗ.ВидОперации;
			//
			Попытка
				СтрДопТЗ.Сумма = СтрТЗ.Сумма;
			Исключение
				СтрДопТЗ.СуммаДокумента = СтрТЗ.СуммаДокумента;
			КонецПопытки;
			//
			СтрДопТЗ.Контрагент = СтрТЗ.Контрагент;
			СтрДопТЗ.Организация = СтрТЗ.Организация;
			СтрДопТЗ.Комментарий = СтрТЗ.Комментарий;
			СтрДопТЗ.Счетконтрагента = ДокбазаИнфо.Документ.СчетКонтрагента;
			СтрДопТЗ.СчетОрганизации = СтрТЗ.СчетОрганизации;
			СтрДопТЗ.НомерСчетаБанкаОрганизации = ДокБазаИнфо.Документ.СчетОрганизации.НомерСчета;
			СтрДопТЗ.НомерСчетаБанкаКонтрагента = ДокБазаИнфо.Документ.СчетКонтрагента.НомерСчета;
			//
			Попытка
				СтрДопТЗ.НазначениеПлатежа = СтрТЗ.НазначениеПлатежа;
			Исключение
				СтрДопТЗ.НазначениеПлатежа = ДокБазаИнфо.Документ.НазначениеПлатежа;
			КонецПопытки;
			СтрДопТЗ.ДоговорКонтрагента = ДокБазаИнфо.Документ.ДоговорКонтрагента;
			//
		КонецЦикла;
	ИначеЕсли РежимПреобразования = "4" Тогда
		ДополненнаяТЗ = Новый ТаблицаЗначений;
		Для Индекс = 0 По ТЗ.Колонки.Количество() - 1 Цикл
			ДополненнаяТЗ.Колонки.Добавить(ТЗ.Колонки[Индекс].Имя, ТЗ.Колонки[Индекс].ТипЗначения);
		КонецЦикла;
		Для каждого СтрТЗ Из ТЗ Цикл
			ДокБазаИнфо = ПолучитьИнформациюОДокВБазе(СтрТЗ, РежимПреобразования);
			Если ДокБазаИнфо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ДокБазаИнфо.ПометкаНаУдаление Тогда
				Продолжить;
			КонецЕсли;
			СтрДопТЗ = ДополненнаяТЗ.Добавить();
			СтрДопТЗ.Дата = СтрТЗ.Дата;
			СтрДопТЗ.Номер = СтрДопТЗ.Номер;
			СтрДопТЗ.Организация = СтрТЗ.Организация;
			СтрДопТЗ.СуммаОперации = СтрТЗ.СуммаОперации;
			СтрДопТЗ.Содержание = СтрТЗ.Стодержание;
			СтрДопТЗ.Комментарий = СтрТЗ.Комментарий;
			СтрДопТЗ.Ответственный = СтрТЗ.Ответственный;
		КонецЦикла;
	ИначеЕсли РежимПреобразования = "5" Тогда
		Сообщить("Данный тип документа пока что в разработке...");
		Возврат;
	КонецЕсли;
	
	// Сохраняем в Excel-файл
	ТабличныйДок = Новый ТабличныйДокумент;
	ТабличныйДок.Область(1, 1, ТабличныйДок.ВысотаТаблицы, ТабличныйДок.ШиринаТаблицы);
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(ДополненнаяТЗ);
	ПостроительОтчета.Вывести(ТабличныйДок);
	НазваниеExcel = ЭтаФорма.ЭлементыФормы.НазваниеExcelФайла.Значение + "_M2E.xls";
	ПолноеНазваниеExcel = ЭтаФорма.ЭлементыФормы.ПутьExcel.Значение + "\" + НазваниеExcel;
	
	ФайлExcel = Новый Файл(ПолноеНазваниеExcel);
	Если ФайлExcel.Существует() Тогда
		Сообщить("Excel файл с таким названием уже существует. Пожалуйста введите другое название.");
		Возврат;
	КонецЕсли;
	
	ТабличныйДок.Записать(ПолноеНазваниеExcel, ТипФайлаТабличногоДокумента.XLS97);
	
	Сообщить("Excel-документ под названием: " + НазваниеExcel + " был успешно экспортирован. Путь: " + ПолноеНазваниеExcel);
КонецПроцедуры

Функция ПолучитьИнформациюОДокВБазе(Данные, РежимПреобразования) Экспорт
	Запрос = ПолучитьЗапрос(Данные, РежимПреобразования);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Док = ТЗ[0].Документ.ПолучитьОбъект();
	ИнфоОДокВБазе = Новый Структура;
	ИнфоОДокВБазе.Вставить("Документ", Док);
	ИнфоОДокВБазе.Вставить("ПометкаНаУдаление", ТЗ[0].ПомеченНаУдаление);
	Возврат ИнфоОДокВБазе;
КонецФункции

Функция ПолучитьЗапрос(Данные, РежимПреобразования) Экспорт
	Запрос = Новый Запрос;
	// лучше разбить по режимам преобразований (Установка параметров запроса)
	Если РежимПреобразования = "0" Тогда
		Запрос.УстановитьПараметр("Дата", Данные.Дата);
		Запрос.УстановитьПараметр("Сумма", Данные.Сумма);
		Запрос.УстановитьПараметр("Контрагент", Данные.Контрагент);
		Запрос.УстановитьПараметр("Организация", Данные.Организация);
		Запрос.УстановитьПараметр("Номер", Данные.Номер);
	ИначеЕсли РежимПреобразования = "1" Тогда
		Запрос.УстановитьПараметр("Дата", Данные.Дата);
		Запрос.УстановитьПараметр("Сумма", Данные.Сумма);
		Запрос.УстановитьПараметр("Контрагент", Данные.Контрагент);
		Запрос.УстановитьПараметр("Организация", Данные.Организация);
		Запрос.УстановитьПараметр("Номер", Данные.Номер);
	ИначеЕсли РежимПреобразования = "2" Тогда
		Запрос.УстановитьПараметр("Дата", Данные.Дата);
		Запрос.УстановитьПараметр("Сумма", Данные.СуммаДокумента);
		Запрос.УстановитьПараметр("Контрагент", Данные.Контрагент);
		Запрос.УстановитьПараметр("Организация", Данные.Организация);
		Запрос.УстановитьПараметр("Номер", Данные.Номер);
	ИначеЕсли РежимПреобразования = "3" Тогда
		Запрос.УстановитьПараметр("Дата", Данные.ДатаОплаты);
		Запрос.УстановитьПараметр("Сумма", Данные.Сумма);
		Запрос.УстановитьПараметр("Контрагент", Данные.Контрагент);
		Запрос.УстановитьПараметр("Организация", Данные.Организация);
		Запрос.УстановитьПараметр("Номер", Данные.Номер);
	ИначеЕсли РежимПреобразования = "4" Тогда
		Запрос.УстановитьПараметр("Дата", Данные.Дата);
		Запрос.УстановитьПараметр("Сумма", Данные.СуммаОперации);
		Запрос.УстановитьПараметр("Организация", Данные.Организация);
		Запрос.УстановитьПараметр("Номер", Данные.Номер);
	КонецЕсли;
	//Если РежимПреобразования = "3" Тогда
	//	Запрос.УстановитьПараметр("Дата", Дата(Данные.ДатаОплаты));
	//ИначеЕсли РежимПреобразования = "2" ИЛИ РежимПреобразования = "1" ИЛИ РежимПреобразования = "0" ИЛИ РежимПреобразования = "4" Тогда
	//	Запрос.УстановитьПараметр("Дата", Дата(Данные.Дата));
	//КонецЕсли;
	//
	//Если РежимПреобразования = "2" Тогда
	//	Запрос.УстановитьПараметр("Сумма", Число(Данные.СуммаДокумента));
	//ИначеЕсли РежимПреобразования = "0" ИЛИ РежимПреобразования = "1" ИЛИ РежимПреобразования = "3"	Тогда
	//	Запрос.УстановитьПараметр("Сумма", Число(Данные.Сумма));
	//ИначеЕсли РежимПреобразования = "4" Тогда
	//	Запрос.УстановитьПараметр("Сумма", Число(Данные.СуммаОперации));
	//КонецЕсли;
	//Запрос.УстановитьПараметр("Контрагент", Данные.Контрагент);
	//Запрос.УстановитьПараметр("Организация", Данные.Организация);
	//Запрос.УстановитьПараметр("Номер", Данные.Номер);
	
	// ТУТ БЫЛ РОФЛ)))
	СтрокаЗапроса = "ВЫБРАТЬ
	|	Document.Ссылка КАК Документ,
	|	Document.ПометкаУдаления КАК ПомеченНаУдаление
	|ИЗ
	|	Документ.Document КАК Document
	|ГДЕ
	|	Document.Дата = &Дата
	|	И Document.СуммаДокумента = &Сумма
	|   И Document.Контрагент.Наименование = &Контрагент
	|   И Document.Организация.Наименование = &Организация
	|   И ВЫРАЗИТЬ(Document.Номер КАК СТРОКА(100)) = &Номер";
	
	Если РежимПреобразования = "0" Тогда
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Document", "ПоступлениеТоваровУслуг");
	ИначеЕсли РежимПреобразования = "1" Тогда
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Document", "РеализацияТоваровУслуг");
	ИначеЕсли РежимПреобразования = "2" Тогда
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Document", "ПлатежноеПоручениеВходящее"); // возможно не правильно
	ИначеЕсли РежимПреобразования = "3" Тогда
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Document", "ПлатежноеПоручениеИсходящее"); // Возможно не правильно
	ИначеЕсли РежимПреобразования = "4" Тогда
		Запрос.Текст = СтрЗаменить(СтрЗаменить(СтрокаЗапроса, "И Document.Контрагент.Наименование = &Контрагент", ""),
		"Document", "БухгалтерскийИНалоговыйУчет"); // требуется проверка
	КонецЕсли;
    Возврат Запрос;
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПоместитьДопИнфоВТЗ(Док)	
	ДокДопИнфо = Новый ТаблицаЗначений;
	ДокДопИнфо.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("Строка"));
	ДокДопИнфо.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ДокДопИнфо.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ДокДопИнфо.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ДокДопИнфо.Колонки.Добавить("НДС", Новый ОписаниеТипов("Строка"));
	ДокДопИнфо.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	ДокДопИнфо.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Строка"));
	
	Если НЕ Док.Товары.Количество() = 0 Тогда
		Для каждого Товар ИЗ Док.Товары Цикл
			//Сообщить(Товар.Номенклатура);
			СтрДоп = ДокДопИнфо.Добавить();
			СтрДоп.Номенклатура = Товар.Номенклатура;
			СтрДоп.Количество = Товар.Количество;
			СтрДоп.Цена = Товар.Цена;
			СтрДоп.Сумма = Товар.Сумма;
			СтрДоп.НДС = Товар.СтавкаНДС;
			СтрДоп.СуммаНДС = Товар.СуммаНДС;
			СтрДоп.Услуга = "НЕТ";
		КонецЦикла;
	КонецЕсли;
	Если НЕ Док.Услуги.Количество() = 0 Тогда
		Для каждого Услуга ИЗ Док.Услуги Цикл
			//Сообщить(Услуга.Номенклатура);
			СтрДоп = ДокДопИнфо.Добавить();
			СтрДоп.Номенклатура = Услуга.Номенклатура;
			СтрДоп.Количество = Услуга.Количество;
			СтрДоп.Цена = Услуга.Цена;
			СтрДоп.Сумма = Услуга.Сумма;
			СтрДоп.НДС = Услуга.СтавкаНДС;
			СтрДоп.СуммаНДС = Услуга.СуммаНДС;
			СтрДоп.Услуга = "ДА";
		КонецЦикла;
	КонецЕсли;
	
	ИнформацияОНоменклатуре = ?(ДокДопИнфо.Количество() = 0, Неопределено, ДокДопИнфо);
	
	Возврат ИнформацияОНоменклатуре;
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ПутьMXLПриИзменении(Элемент)
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(Элемент.Значение);
	Если Не Файл.Существует() Тогда
		Отказ = Истина;
		Возврат; 
	КонецЕсли;
	ЗаполнитьСтокНазваниеExcel(Элемент.Значение);
КонецПроцедуры

Процедура ЗаполнитьСтокНазваниеExcel(Строка)	
	Результат = РазложитьСтрокуВМассив(Строка);
	СтокНазваниеExcelСРасширением = Результат[Результат.Количество() - 1];
	Результат2 = РазложитьСтрокуВМассив(СтокНазваниеExcelСРасширением, ".");
	СтокНазваниеExcel = Результат2[0];
	ЭтаФорма.ЭлементыФормы.НазваниеExcelФайла.Значение = СтокНазваниеExcel;
	//Сообщить(Результат);
КонецПроцедуры

//RegExp --------------------------------------------------------

Процедура РегулярныеВыражения_Инициализация(Шаблон, ИскатьДоПервогоСовпадения = Истина, МногоСтрок = Истина, ИгнорироватьРегистр = Истина) Экспорт

    Если RegExp = Неопределено Тогда //Нужна инициализация
        RegExp = Новый COMОбъект("VBScript.RegExp");    // создаем объект для работы с регулярными выражениями
    КонецЕсли;

    //Заполняем данные
    RegExp.MultiLine = МногоСтрок;                  // истина — текст многострочный, ложь — одна строка
    RegExp.Global = Не ИскатьДоПервогоСовпадения;   // истина — поиск по всей строке, ложь — до первого совпадения
    RegExp.IgnoreCase = ИгнорироватьРегистр;        // истина — игнорировать регистр строки при поиске
    RegExp.Pattern = Шаблон;                        // шаблон (регулярное выражение)

КонецПроцедуры

Функция РегулярныеВыражения_Проверка(ПроверяемыйТекст)

    Возврат RegExp.Test(ПроверяемыйТекст);

КонецФункции

Функция РегулярныеВыражения_Выполнить(АнализируемыйТекст) Экспорт

    РезультатАнализаСтроки = RegExp.Execute(АнализируемыйТекст);

    МассивВыражений = Новый Массив;

    Для Каждого Выражение Из РезультатАнализаСтроки Цикл
        СтруктураВыражение = Новый Структура ("Начало, Длина, Значение, ПодВыражения", Выражение.FirstIndex, Выражение.Length,Выражение.Value);

        //Обработка подвыражений
        МассивПодВыражений = Новый Массив;
        Для Каждого ПодВыражение Из Выражение.SubMatches Цикл
            МассивПодВыражений.Добавить(ПодВыражение);
        КонецЦикла;
        СтруктураВыражение.ПодВыражения = МассивПодВыражений;

        МассивВыражений.Добавить (СтруктураВыражение);

    КонецЦикла;

    Возврат МассивВыражений;

КонецФункции

//RegExp --------------------------------------------------------

Функция РазложитьСтрокуВМассив(Строка, Разделитель = "\") Экспорт

    //Разбор строки вида 1,СЛОВО,(1+2); Маска для разделителя ',' ([^\,]+),?"
    РегулярныеВыражения_Инициализация ("[^\" + Разделитель + "]+", Ложь, Ложь, Ложь);
    Выражения = РегулярныеВыражения_Выполнить(Строка);

    Массив = Новый Массив;

    Для Каждого Выражение Из Выражения Цикл
        Массив.Добавить(Выражение.Значение);
    КонецЦикла;

    Возврат Массив;

КонецФункции

Процедура ПутьMXLНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр						=	"Табличный документ (*.mxl)";
	ДиалогВыбораФайла.Расширение					=	"mxl";
	ДиалогВыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогВыбораФайла.ИндексФильтра					=	0;
	ДиалогВыбораФайла.ПолноеИмяФайла				=	Элемент.Значение;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ЭтаФорма.ПутьMXL = ДиалогВыбораФайла.ПолноеИмяФайла;
		ПутьMXLПриИзменении(Элемент);	
	КонецЕсли;
КонецПроцедуры

Процедура ПутьExcelПриИзменении(Элемент)
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПутьExcelНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	ДиалогВыбораКаталога =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Заголовок				=	"Выберите каталог для сохранение Excel файла";
	ДиалогВыбораКаталога.МножественныйВыбор		=	Ложь;
	
	Если ДиалогВыбораКаталога.Выбрать() Тогда
		ЭтаФорма.ПутьExcel = ДиалогВыбораКаталога.Каталог;
		ПутьExcelПриИзменении(Элемент);	
	КонецЕсли;
КонецПроцедуры

//здесь задается список типов документов, которые можно преобразовать из MXL в Excel
Процедура ПриОткрытии()
	ВариантыВыбора = Новый Массив;
	ВариантыВыбора.Добавить("ПриобретениеТоваровУслуг");
	ВариантыВыбора.Добавить("РеализацияТоваровУслуг");
	ВариантыВыбора.Добавить("ПлатежноеПоручениеВходящее");
	ВариантыВыбора.Добавить("ПлатежноеПоручениеИсходящее");
	ВариантыВыбора.Добавить("ОперацияРегламентированныйУчет");
	ВариантыВыбора.Добавить("ОтражениеЗарплатыВФинансовомУчете");
	
	ЭлементыФормы.ТипДокументов.СписокВыбора.Очистить();
	Для Индекс = 0 По ВариантыВыбора.Количество() - 1 Цикл
		ЭлементыФормы.ТипДокументов.СписокВыбора.Добавить(Индекс, ВариантыВыбора[Индекс]);
	КонецЦикла;
	ЭлементыФормы.ТипДокументов.Значение = 0;
КонецПроцедуры

Процедура ДляРазработчикаНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ЭлементыФормы.ПутьMXL.Значение) ИЛИ НЕ ЗначениеЗаполнено(ЭтаФорма.ЭлементыФормы.ТипДокументов.Значение) Тогда
		Сообщить("ДЛЯ РАЗРАБОТЧИКА - необходимо указать MXL-файл и тип документов!");
		Возврат;
	КонецЕсли;
	ФормаДляРазработчика = ЭтотОбъект.ПолучитьФорму("ФормаДляРазработчика");
	ФормаДляРазработчика.ЭлементыФормы.ПутьMXL.Значение = ЭтаФорма.ЭлементыФормы.ПутьMXL.Значение;
	РежимПреобразования = Строка(ЭтаФорма.ЭлементыФормы.ТипДокументов.Значение);
	ФормаДляРазработчика.ЭлементыФормы.РежимПреобразования.Значение = Строка(РежимПреобразования); 
	ФормаДляРазработчика.Открыть();
КонецПроцедуры



