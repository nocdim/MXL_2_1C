//Здесь, по-хорошему, необходимо сделать рефакторинг. 
Функция ПодобратьДокументДляРазработчика(РежимПреобразования)
	ДанныеMXL = ПолучитьДанныеMXL();
	Если ДанныеMXL = Неопределено Тогда
		Error = Новый Структура;
		Error.Вставить("Неопределено", Неопределено);
		Error.Вставить("ErrorCode", "001");
		Возврат Error;
	КонецЕсли;
	// здесь возникает ошибка, необходимо исправить!!!
	ТЗ = ПрочитатьMXL(ДанныеMXL);
	ДокБазаИнфо = ПолучитьИнформациюОДокВБазе(ТЗ[0], РежимПреобразования);
	Если ДокБазаИнфо = Неопределено Тогда
		Error = Новый Структура;
		Error.Вставить("Неопределено", Неопределено);
		Error.Вставить("ErrorCode", "002");
		Возврат Error;	
	КонецЕсли;
	Если ДокБазаИнфо.ПометкаНаУдаление Тогда
		Error = Новый Структура;
		Error.Вставить("Неопределено", Неопределено);
		Error.Вставить("ErrorCode", "003");
		Возврат Error;
	КонецЕсли;
	Если РежимПреобразования = "4" Тогда
		ДокументИДвижения = Новый Структура;
		ДокументИДвижения.Вставить("Документ", ДокБазаИнфо.Документ);
		ДокументИДвижения.Вставить("Движения", ДокБазаИнфо.Движения);
		Возврат ДокументИДвижения;
	КонецЕсли;
	Возврат ДокБазаИнфо.Документ;
КонецФункции

Функция ПолучитьДанныеMXL()
	//ПутьMXL = ЭтаФорма.ЭлементыФормы.ПутьMXL.Значение;
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьMXL);
	ФайлMXL = Новый Файл(ПутьMXL);
	Если НЕ ФайлMXL.Существует() Тогда
		Сообщить("MXL-файл не найден.");
		Возврат Неопределено;
	КонецЕсли;
	ДанныеMXL = Новый Структура;
	ДанныеMXL.Вставить("Расширение", ФайлMXL.Расширение);
	ДанныеMXL.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	Возврат ДанныеMXL;
КонецФункции

Функция ПрочитатьMXL(ДанныеMXL) Экспорт
	ФайлMXLВременный = ПолучитьИмяВременногоФайла(ДанныеMXL.Расширение);
	ДанныеMXL.ДвоичныеДанные.Записать(ФайлMXLВременный);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ФайлMXLВременный);
	УдалитьФайлы(ФайлMXLВременный);
	ОбластьТаблицы = ТабличныйДокумент.Область(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьТаблицы);
	ПостроительЗапроса.Выполнить();
	Возврат ПостроительЗапроса.Результат.Выгрузить();
КонецФункции

Функция ПолучитьИнформациюОДокВБазе(Данные, РежимПреобразования) Экспорт
	Запрос = ПолучитьЗапрос(Данные, РежимПреобразования);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Док = ТЗ[0].Документ.ПолучитьОбъект();
	Если РежимПреобразования = "4" Тогда
		ДопДанныеТЗ = ОбработатьДвиженияДокумента(Док);
		Если ДопДанныеТЗ = Неопределено Тогда
			Возврат Неопределено;		
		КонецЕсли;
		ИнфоОДокВБазе = Новый Структура;
		ИнфоОДокВБазе.Вставить("Документ", Док);
		ИнфоОДокВБазе.Вставить("ПометкаНаУдаление", ТЗ[0].ПомеченНаУдаление);
		ИнфоОДокВБазе.Вставить("Движения", ДопДанныеТЗ);
		Возврат ИнфоОДокВБазе;
	КонецЕсли;
	ИнфоОДокВБазе = Новый Структура;
	ИнфоОДокВБазе.Вставить("Документ", Док);
	ИнфоОДокВБазе.Вставить("ПометкаНаУдаление", ТЗ[0].ПомеченНаУдаление);
	Возврат ИнфоОДокВБазе;
КонецФункции

Функция ОбработатьДвиженияДокумента(Документ)
	НаборЗаписей = Документ.Движения.Хозрасчетный;
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		ТЗ = НаборЗаписей.Выгрузить();
		Возврат ТЗ;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// ДЛЯ ТЕСТА

	//Для каждого НаборЗаписей Из Документ.Движения Цикл
	//	НаборЗаписей.Прочитать();
	//	Индекс = 0;
	//	НазваниеExcel = "TEST" + Строка(Индекс);
	//	Если НаборЗаписей.Количество() > 0 Тогда
	//		ТЗ = НаборЗаписей.Выгрузить();
	//		
	//		//ТабличныйДок = Новый ТабличныйДокумент;
	//		//ТабличныйДок.Область(1, 1, ТабличныйДок.ВысотаТаблицы, ТабличныйДок.ШиринаТаблицы);
	//		//ПостроительОтчета = Новый ПостроительОтчета;
	//		//ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
	//		//ПостроительОтчета.Вывести(ТабличныйДок);
	//		//ПолноеНазваниеExcel = "***********************" + "\" + НазваниеExcel  + ".xls";			
	//		//ТабличныйДок.Записать(ПолноеНазваниеExcel, ТипФайлаТабличногоДокумента.XLS97);
	//		//Индекс = Индекс + 1;
	//	КонецЕсли;
	//КонецЦикла;
КонецФункции

Функция ПолучитьЗапрос(Данные, РежимПреобразования) Экспорт
	Запрос = Новый Запрос;
	//лучше разбить по режимам преобразований (Установка параметров запроса)
	Если РежимПреобразования = "0" Тогда
		Запрос.УстановитьПараметр("Дата", НачалоДня(Данные.Дата));
		Запрос.УстановитьПараметр("Сумма", Данные.Сумма);
		Запрос.УстановитьПараметр("Контрагент", Данные.Контрагент);
		Запрос.УстановитьПараметр("Организация", Данные.Организация);
		Запрос.УстановитьПараметр("Номер", Данные.Номер);
	ИначеЕсли РежимПреобразования = "1" Тогда
		Запрос.УстановитьПараметр("Дата", НачалоДня(Данные.Дата));
		Запрос.УстановитьПараметр("Сумма", Данные.Сумма);
		Запрос.УстановитьПараметр("Контрагент", Данные.Контрагент);
		Запрос.УстановитьПараметр("Организация", Данные.Организация);
		Запрос.УстановитьПараметр("Номер", Данные.Номер);
	ИначеЕсли РежимПреобразования = "2" Тогда
		Запрос.УстановитьПараметр("Дата", НачалоДня(Данные.Дата));
		Запрос.УстановитьПараметр("Сумма", Данные.СуммаДокумента);
		Запрос.УстановитьПараметр("Контрагент", Данные.Контрагент);
		Запрос.УстановитьПараметр("Организация", Данные.Организация);
		Запрос.УстановитьПараметр("Номер", Данные.Номер);
	ИначеЕсли РежимПреобразования = "3" Тогда
		Запрос.УстановитьПараметр("Дата", НачалоДня(Данные.ДатаОплаты));
		Запрос.УстановитьПараметр("Сумма", Данные.Сумма);
		Запрос.УстановитьПараметр("Контрагент", Данные.Контрагент);
		Запрос.УстановитьПараметр("Организация", Данные.Организация);
		Запрос.УстановитьПараметр("Номер", Данные.Номер);
	ИначеЕсли РежимПреобразования = "4" Тогда
		Запрос.УстановитьПараметр("Дата", НачалоДня(Данные.Дата));
		Запрос.УстановитьПараметр("Сумма", Данные.СуммаОперации);
		Запрос.УстановитьПараметр("Организация", Данные.Организация);
		Запрос.УстановитьПараметр("Номер", Данные.Номер);
	КонецЕсли;

	СтрокаЗапроса = "ВЫБРАТЬ
	|	Document.Ссылка КАК Документ,
	|	Document.ПометкаУдаления КАК ПомеченНаУдаление
	|ИЗ
	|	Документ.Document КАК Document
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(Document.Дата, ДЕНЬ) = &Дата
	|	И Document.СуммаДокумента = &Сумма
	|   И Document.Контрагент.Наименование = &Контрагент
	|   И Document.Организация.Наименование = &Организация
	|   И ВЫРАЗИТЬ(Document.Номер КАК СТРОКА(100)) = &Номер";
	
	Если РежимПреобразования = "0" Тогда
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Document", "ПоступлениеТоваровУслуг");
	ИначеЕсли РежимПреобразования = "1" Тогда
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Document", "РеализацияТоваровУслуг");
	ИначеЕсли РежимПреобразования = "2" Тогда
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Document", "ПлатежноеПоручениеВходящее"); // возможно не правильно
	ИначеЕсли РежимПреобразования = "3" Тогда
		Запрос.Текст = СтрЗаменить(СтрокаЗапроса, "Document", "ПлатежноеПоручениеИсходящее"); // Возможно не правильно
	ИначеЕсли РежимПреобразования = "4" Тогда
		Запрос.Текст = СтрЗаменить(СтрЗаменить(СтрокаЗапроса, "И Document.СуммаДокумента = &Сумма
	|   И Document.Контрагент.Наименование = &Контрагент", ""),
		"Document", "ОперацияБух"); // требуется проверка
	КонецЕсли;
    Возврат Запрос;
КонецФункции

Процедура ПриОткрытии()
	ЭтотОбъект.ДляРазработчикаРеквизитыФормы.Очистить();
	ЭтотОбъект.ДляРазработчикаРеквизитыТЧФормы.Очистить();
	Попытка
		ЭтаФорма.ЭлементыФормы.РежимПреобразования.Значение = РежимПреобразования;
		ДокументДляРазработчика = ПодобратьДокументДляРазработчика(РежимПреобразования);
		//Сообщить(ТипЗнч(ДокументДляРазработчика));
		//Сообщить(ТипЗнч("Структура"));
		//Сообщить(ТипЗнч(ДокументДляРазработчика) = ТипЗнч("Структура"));
		Если Строка(ТипЗнч(ДокументДляРазработчика)) = "Структура" Тогда
			Сообщить("Структура");
			//Необходимо сделать рефакторинг, но мне лень, т.к. эта часть обработки создана ради тестов и выведения реквизитов...	
			Попытка
				Если ДокументДляРазработчика.Неопределено = Неопределено Тогда
					Сообщить("ОШИБКА: " + ДокументДляРазработчика.ErrorCode);
					Возврат;
				КонецЕсли;
			Исключение
			КонецПопытки;
			Для каждого Реквизит Из ДокументДляРазработчика.Документ.Метаданные().Реквизиты Цикл
				СтрокаРеквизита = ЭтотОбъект.ДляРазработчикаРеквизитыФормы.Добавить();
				СтрокаРеквизита.ИмяРеквизита = Строка(Реквизит.Имя);
				СтрокаРеквизита.ЗначениеРеквизита = Строка(ДокументДляРазработчика.Документ[Реквизит.Имя]);
				СтрокаРеквизита.ТипРеквизита = Строка(?(Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]) <> Неопределено, Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]).ПолноеИмя(), Реквизит.Тип));
			КонецЦикла;
			Для каждого ТЧ Из ДокументДляРазработчика.Документ.Метаданные().ТабличныеЧасти Цикл
				СтрокаТЧИмя = ЭтотОбъект.ДляРазработчикаРеквизитыТЧФормы.Добавить();
				СтрокаТЧИмя.ИмяТабличнойЧасти = Строка(ТЧ.Имя);
				Для Индекс = 0 По ДокументДляРазработчика.Документ[ТЧ.Имя].Количество() - 1 Цикл
					Для каждого Реквизит Из ТЧ.Реквизиты Цикл
						СтрокаРеквизитаСтрокиТЧ = ЭтотОбъект.ДляРазработчикаРеквизитыТЧФормы.Добавить();
						СтрокаРеквизитаСтрокиТЧ.ИмяРеквизита = Строка(Реквизит);
						СтрокаРеквизитаСтрокиТЧ.ЗначениеРеквизита = Строка(ДокументДляРазработчика.Документ[ТЧ.Имя][Индекс][Реквизит.Имя]);
						//
						//Сообщить(ДокументДляРазработчика[ТЧ.Имя]);
						//Сообщить(ДокументДляРазработчика[ТЧ.Имя][Индекс]);
						//Сообщить(Реквизит.Тип);
						//Сообщить(Реквизит.Тип.Типы());
						//Сообщить(Реквизит.Тип.Типы()[0]);
						//Сообщить(Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]).ПолноеИмя());
						//Сообщить(ДокументДляРазработчика[ТЧ.Имя][Индекс][Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]).ПолноеИмя()]);
						//
						СтрокаРеквизитаСтрокиТЧ.ТипРеквизита = ?(Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]) <> Неопределено, Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]).ПолноеИмя(), Реквизит.Тип);
					КонецЦикла;
				КонецЦикла;
				СтрокаРазделитель = ЭтотОбъект.ДляРазработчикаРеквизитыТЧФормы.Добавить();
				СтрокаРазделитель.ИмяТабличнойЧасти = "-----------------------------------------------------------";
				СтрокаРазделитель.ИмяРеквизита = "-----------------------------------------------------------";
				СтрокаРазделитель.ЗначениеРеквизита = "-----------------------------------------------------------";
				СтрокаРазделитель.ТипРеквизита = "-----------------------------------------------------------";
			КонецЦикла;
			Для каждого СтрокаТЗДвиж Из ДокументДляРазработчика.Движения Цикл
				СтрокаТЧДвиж = ЭтотОбъект.ДляРазработчикаДвиженияДля4.Добавить();
				СтрокаТЧДвиж.Период = Строка(СтрокаТЗДвиж.Период);
				СтрокаТЧДвиж.Регистратор = Строка(СтрокаТЗДвиж.Регистратор);
				СтрокаТЧДвиж.Активность = Строка(СтрокаТЗДвиж.Активность);
				СтрокаТЧДвиж.СчетДт = Строка(СтрокаТЗДвиж.СчетДт);
				СтрокаТЧДвиж.СчетКт = Строка(СтрокаТЗДвиж.СчетКт);
				СтрокаТЧДвиж.Организация = Строка(СтрокаТЗДвиж.Организация);
				СтрокаТЧДвиж.Сумма = Строка(СтрокаТЗДвиж.Сумма);
				СтрокаТЧДвиж.ВидСубконтоДт1 = Строка(СтрокаТЗДвиж.ВидСубконтоДт1);
				СтрокаТЧДвиж.СубконтоДт1 = Строка(СтрокаТЗДвиж.СубконтоДт1);
				СтрокаТЧДвиж.ВидСубконтоДт2 = Строка(СтрокаТЗДвиж.ВидСубконтоДт2);
				СтрокаТЧДвиж.СубконтоДт2 = Строка(СтрокаТЗДвиж.СубконтоДт2);
				СтрокаТЧДвиж.ВидСубконтоДт3 = Строка(СтрокаТЗДвиж.ВидСубконтоДт3);
				СтрокаТЧДвиж.СубконтоДт3 = Строка(СтрокаТЗДвиж.СубконтоДт3);
				СтрокаТЧДвиж.ВидСубконтоКт1 = Строка(СтрокаТЗДвиж.ВидСубконтоКт1);
				СтрокаТЧДвиж.СубконтоКт1 = Строка(СтрокаТЗДвиж.СубконтоКт1);
				СтрокаТЧДвиж.ВидСубконтоКт2 = Строка(СтрокаТЗДвиж.ВидСубконтоКт2);
				СтрокаТЧДвиж.СубконтоКт2 = Строка(СтрокаТЗДвиж.СубконтоКт2);
				СтрокаТЧДвиж.ВидСубконтоКт3 = Строка(СтрокаТЗДвиж.ВидСубконтоКт3);
				СтрокаТЧДвиж.СубконтоКт3 = Строка(СтрокаТЗДвиж.СубконтоКт3);
			КонецЦикла;
		Иначе	
			Попытка
				Если ДокументДляРазработчика.Неопределено = Неопределено Тогда
					Сообщить("ОШИБКА: " + ДокументДляРазработчика.ErrorCode);
					Возврат;
				КонецЕсли;
			Исключение
			КонецПопытки;
			Для каждого Реквизит Из ДокументДляРазработчика.Метаданные().Реквизиты Цикл
				СтрокаРеквизита = ЭтотОбъект.ДляРазработчикаРеквизитыФормы.Добавить();
				СтрокаРеквизита.ИмяРеквизита = Строка(Реквизит.Имя);
				СтрокаРеквизита.ЗначениеРеквизита = Строка(ДокументДляРазработчика[Реквизит.Имя]);
				СтрокаРеквизита.ТипРеквизита = Строка(?(Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]) <> Неопределено, Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]).ПолноеИмя(), Реквизит.Тип));
			КонецЦикла;
			Для каждого ТЧ Из ДокументДляРазработчика.Метаданные().ТабличныеЧасти Цикл
				СтрокаТЧИмя = ЭтотОбъект.ДляРазработчикаРеквизитыТЧФормы.Добавить();
				СтрокаТЧИмя.ИмяТабличнойЧасти = Строка(ТЧ.Имя);
				Для Индекс = 0 По ДокументДляРазработчика[ТЧ.Имя].Количество() - 1 Цикл
					Для каждого Реквизит Из ТЧ.Реквизиты Цикл
						СтрокаРеквизитаСтрокиТЧ = ЭтотОбъект.ДляРазработчикаРеквизитыТЧФормы.Добавить();
						СтрокаРеквизитаСтрокиТЧ.ИмяРеквизита = Строка(Реквизит);
						СтрокаРеквизитаСтрокиТЧ.ЗначениеРеквизита = Строка(ДокументДляРазработчика[ТЧ.Имя][Индекс][Реквизит.Имя]);
						//
						//Сообщить(ДокументДляРазработчика[ТЧ.Имя]);
						//Сообщить(ДокументДляРазработчика[ТЧ.Имя][Индекс]);
						//Сообщить(Реквизит.Тип);
						//Сообщить(Реквизит.Тип.Типы());
						//Сообщить(Реквизит.Тип.Типы()[0]);
						//Сообщить(Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]).ПолноеИмя());
						//Сообщить(ДокументДляРазработчика[ТЧ.Имя][Индекс][Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]).ПолноеИмя()]);
						//
						СтрокаРеквизитаСтрокиТЧ.ТипРеквизита = ?(Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]) <> Неопределено, Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]).ПолноеИмя(), Реквизит.Тип);
					КонецЦикла;
				КонецЦикла;
				СтрокаРазделитель = ЭтотОбъект.ДляРазработчикаРеквизитыТЧФормы.Добавить();
				СтрокаРазделитель.ИмяТабличнойЧасти = "-----------------------------------------------------------";
				СтрокаРазделитель.ИмяРеквизита = "-----------------------------------------------------------";
				СтрокаРазделитель.ЗначениеРеквизита = "-----------------------------------------------------------";
				СтрокаРазделитель.ТипРеквизита = "-----------------------------------------------------------";
			КонецЦикла;
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ИнфоОписание = Инфо.Описание;
		ИнфоИмяМодуля = Инфо.ИмяМодуля;
		ИнфоНомерСтроки = Инфо.НомерСтроки;
		ИнфоИсходнаяСтрока = Инфо.ИсходнаяСтрока;
		ТекстСообщенияОшибки = ИнфоОписание + Символы.ПС + ИнфоИмяМодуля + Символы.ПС + 
		ИнфоНомерСтроки + Символы.ПС + ИнфоИсходнаяСтрока;
		Сообщить("Unexpected error occurred: " + Символы.ПС + ТекстСообщенияОшибки);
	КонецПопытки;
КонецПроцедуры

